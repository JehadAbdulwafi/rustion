// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: news.sql

package database

import (
	"context"
	"database/sql"
)

const createNewsArticle = `-- name: CreateNewsArticle :one
INSERT INTO news (title, content, category_id)
VALUES ($1, $2, $3)
RETURNING id, title, content, category_id, created_at, updated_at
`

type CreateNewsArticleParams struct {
	Title      string
	Content    string
	CategoryID sql.NullInt32
}

func (q *Queries) CreateNewsArticle(ctx context.Context, arg CreateNewsArticleParams) (News, error) {
	row := q.db.QueryRowContext(ctx, createNewsArticle, arg.Title, arg.Content, arg.CategoryID)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNewsArticle = `-- name: DeleteNewsArticle :exec
DELETE FROM news
WHERE id = $1
`

func (q *Queries) DeleteNewsArticle(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNewsArticle, id)
	return err
}

const getAllNewsArticles = `-- name: GetAllNewsArticles :many
SELECT id, title, content, category_id, created_at, updated_at
FROM news
ORDER BY created_at DESC
`

func (q *Queries) GetAllNewsArticles(ctx context.Context) ([]News, error) {
	rows, err := q.db.QueryContext(ctx, getAllNewsArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewsArticle = `-- name: GetNewsArticle :one
SELECT id, title, content, category_id, created_at, updated_at
FROM news
WHERE id = $1
`

func (q *Queries) GetNewsArticle(ctx context.Context, id int32) (News, error) {
	row := q.db.QueryRowContext(ctx, getNewsArticle, id)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNewsArticle = `-- name: UpdateNewsArticle :one
UPDATE news
SET title = $1, content = $2, category_id = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, title, content, category_id, created_at, updated_at
`

type UpdateNewsArticleParams struct {
	Title      string
	Content    string
	CategoryID sql.NullInt32
	ID         int32
}

func (q *Queries) UpdateNewsArticle(ctx context.Context, arg UpdateNewsArticleParams) (News, error) {
	row := q.db.QueryRowContext(ctx, updateNewsArticle,
		arg.Title,
		arg.Content,
		arg.CategoryID,
		arg.ID,
	)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subscriptions.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const cancelSubscription = `-- name: CancelSubscription :exec
UPDATE subscriptions
SET status = 'cancelled',
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) CancelSubscription(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, cancelSubscription, id)
	return err
}

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (
    user_id, plan_id, status, billing_cycle,
    current_period_start, current_period_end
) VALUES (
    $1, $2, $3, $4, 
    $5, $6
) RETURNING id, user_id, plan_id, status, billing_cycle, current_period_start, current_period_end, cancel_at_period_end, created_at, updated_at
`

type CreateSubscriptionParams struct {
	UserID             uuid.UUID
	PlanID             uuid.UUID
	Status             SubscriptionStatusEnum
	BillingCycle       SubscriptionBillingCycleEnum
	CurrentPeriodStart time.Time
	CurrentPeriodEnd   time.Time
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.UserID,
		arg.PlanID,
		arg.Status,
		arg.BillingCycle,
		arg.CurrentPeriodStart,
		arg.CurrentPeriodEnd,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Status,
		&i.BillingCycle,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscription = `-- name: GetSubscription :one
SELECT s.id, s.user_id, s.plan_id, s.status, s.billing_cycle, s.current_period_start, s.current_period_end, s.cancel_at_period_end, s.created_at, s.updated_at, 
       p.name as plan_name, 
       p.price_monthly, 
       p.price_yearly,
       p.features as plan_features
FROM subscriptions s
JOIN plans p ON s.plan_id = p.id
WHERE s.id = $1
`

type GetSubscriptionRow struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	PlanID             uuid.UUID
	Status             SubscriptionStatusEnum
	BillingCycle       SubscriptionBillingCycleEnum
	CurrentPeriodStart time.Time
	CurrentPeriodEnd   time.Time
	CancelAtPeriodEnd  bool
	CreatedAt          sql.NullTime
	UpdatedAt          sql.NullTime
	PlanName           string
	PriceMonthly       string
	PriceYearly        string
	PlanFeatures       json.RawMessage
}

func (q *Queries) GetSubscription(ctx context.Context, id uuid.UUID) (GetSubscriptionRow, error) {
	row := q.db.QueryRowContext(ctx, getSubscription, id)
	var i GetSubscriptionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Status,
		&i.BillingCycle,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PlanName,
		&i.PriceMonthly,
		&i.PriceYearly,
		&i.PlanFeatures,
	)
	return i, err
}

const getUserActiveSubscription = `-- name: GetUserActiveSubscription :one
SELECT s.id, s.user_id, s.plan_id, s.status, s.billing_cycle, s.current_period_start, s.current_period_end, s.cancel_at_period_end, s.created_at, s.updated_at, 
       p.name as plan_name, 
       p.price_monthly, 
       p.price_yearly,
       p.features as plan_features
FROM subscriptions s
JOIN plans p ON s.plan_id = p.id
WHERE s.user_id = $1 
AND s.status = 'active'::subscription_status_enum
AND s.current_period_end > CURRENT_TIMESTAMP
`

type GetUserActiveSubscriptionRow struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	PlanID             uuid.UUID
	Status             SubscriptionStatusEnum
	BillingCycle       SubscriptionBillingCycleEnum
	CurrentPeriodStart time.Time
	CurrentPeriodEnd   time.Time
	CancelAtPeriodEnd  bool
	CreatedAt          sql.NullTime
	UpdatedAt          sql.NullTime
	PlanName           string
	PriceMonthly       string
	PriceYearly        string
	PlanFeatures       json.RawMessage
}

func (q *Queries) GetUserActiveSubscription(ctx context.Context, userID uuid.UUID) (GetUserActiveSubscriptionRow, error) {
	row := q.db.QueryRowContext(ctx, getUserActiveSubscription, userID)
	var i GetUserActiveSubscriptionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Status,
		&i.BillingCycle,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PlanName,
		&i.PriceMonthly,
		&i.PriceYearly,
		&i.PlanFeatures,
	)
	return i, err
}

const getUserSubscriptions = `-- name: GetUserSubscriptions :many
SELECT s.id, s.user_id, s.plan_id, s.status, s.billing_cycle, s.current_period_start, s.current_period_end, s.cancel_at_period_end, s.created_at, s.updated_at, 
       p.name as plan_name, 
       p.price_monthly, 
       p.price_yearly,
       p.features as plan_features
FROM subscriptions s
JOIN plans p ON s.plan_id = p.id
WHERE s.user_id = $1 
AND s.current_period_end > CURRENT_TIMESTAMP
`

type GetUserSubscriptionsRow struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	PlanID             uuid.UUID
	Status             SubscriptionStatusEnum
	BillingCycle       SubscriptionBillingCycleEnum
	CurrentPeriodStart time.Time
	CurrentPeriodEnd   time.Time
	CancelAtPeriodEnd  bool
	CreatedAt          sql.NullTime
	UpdatedAt          sql.NullTime
	PlanName           string
	PriceMonthly       string
	PriceYearly        string
	PlanFeatures       json.RawMessage
}

func (q *Queries) GetUserSubscriptions(ctx context.Context, userID uuid.UUID) ([]GetUserSubscriptionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserSubscriptions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserSubscriptionsRow
	for rows.Next() {
		var i GetUserSubscriptionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PlanID,
			&i.Status,
			&i.BillingCycle,
			&i.CurrentPeriodStart,
			&i.CurrentPeriodEnd,
			&i.CancelAtPeriodEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PlanName,
			&i.PriceMonthly,
			&i.PriceYearly,
			&i.PlanFeatures,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExpiredSubscriptions = `-- name: ListExpiredSubscriptions :many
SELECT s.id, s.user_id, s.plan_id, s.status, s.billing_cycle, s.current_period_start, s.current_period_end, s.cancel_at_period_end, s.created_at, s.updated_at, 
       p.name as plan_name, 
       p.price_monthly, 
       p.price_yearly
FROM subscriptions s
JOIN plans p ON s.plan_id = p.id
WHERE s.current_period_end < CURRENT_TIMESTAMP
AND s.status = 'active'
`

type ListExpiredSubscriptionsRow struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	PlanID             uuid.UUID
	Status             SubscriptionStatusEnum
	BillingCycle       SubscriptionBillingCycleEnum
	CurrentPeriodStart time.Time
	CurrentPeriodEnd   time.Time
	CancelAtPeriodEnd  bool
	CreatedAt          sql.NullTime
	UpdatedAt          sql.NullTime
	PlanName           string
	PriceMonthly       string
	PriceYearly        string
}

func (q *Queries) ListExpiredSubscriptions(ctx context.Context) ([]ListExpiredSubscriptionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listExpiredSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListExpiredSubscriptionsRow
	for rows.Next() {
		var i ListExpiredSubscriptionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PlanID,
			&i.Status,
			&i.BillingCycle,
			&i.CurrentPeriodStart,
			&i.CurrentPeriodEnd,
			&i.CancelAtPeriodEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PlanName,
			&i.PriceMonthly,
			&i.PriceYearly,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionPeriod = `-- name: UpdateSubscriptionPeriod :one
UPDATE subscriptions
SET current_period_start = $2,
    current_period_end = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, plan_id, status, billing_cycle, current_period_start, current_period_end, cancel_at_period_end, created_at, updated_at
`

type UpdateSubscriptionPeriodParams struct {
	ID                 uuid.UUID
	CurrentPeriodStart time.Time
	CurrentPeriodEnd   time.Time
}

func (q *Queries) UpdateSubscriptionPeriod(ctx context.Context, arg UpdateSubscriptionPeriodParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionPeriod, arg.ID, arg.CurrentPeriodStart, arg.CurrentPeriodEnd)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Status,
		&i.BillingCycle,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSubscriptionStatus = `-- name: UpdateSubscriptionStatus :one
UPDATE subscriptions
SET status = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, plan_id, status, billing_cycle, current_period_start, current_period_end, cancel_at_period_end, created_at, updated_at
`

type UpdateSubscriptionStatusParams struct {
	ID     uuid.UUID
	Status SubscriptionStatusEnum
}

func (q *Queries) UpdateSubscriptionStatus(ctx context.Context, arg UpdateSubscriptionStatusParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionStatus, arg.ID, arg.Status)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Status,
		&i.BillingCycle,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upgradeSubscription = `-- name: UpgradeSubscription :one
UPDATE subscriptions
SET current_period_start = $3,
    current_period_end = $4,
    billing_cycle = $5,
    plan_id = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, plan_id, status, billing_cycle, current_period_start, current_period_end, cancel_at_period_end, created_at, updated_at
`

type UpgradeSubscriptionParams struct {
	ID                 uuid.UUID
	PlanID             uuid.UUID
	CurrentPeriodStart time.Time
	CurrentPeriodEnd   time.Time
	BillingCycle       SubscriptionBillingCycleEnum
}

func (q *Queries) UpgradeSubscription(ctx context.Context, arg UpgradeSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, upgradeSubscription,
		arg.ID,
		arg.PlanID,
		arg.CurrentPeriodStart,
		arg.CurrentPeriodEnd,
		arg.BillingCycle,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Status,
		&i.BillingCycle,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CancelAtPeriodEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: featured_sections.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeaturedArticle = `-- name: CreateFeaturedArticle :one
INSERT INTO featured_articles (featured_section_id, article_id)
VALUES ($1, $2)
RETURNING id, featured_section_id, article_id, created_at, updated_at
`

type CreateFeaturedArticleParams struct {
	FeaturedSectionID uuid.NullUUID
	ArticleID         uuid.NullUUID
}

func (q *Queries) CreateFeaturedArticle(ctx context.Context, arg CreateFeaturedArticleParams) (FeaturedArticle, error) {
	row := q.db.QueryRowContext(ctx, createFeaturedArticle, arg.FeaturedSectionID, arg.ArticleID)
	var i FeaturedArticle
	err := row.Scan(
		&i.ID,
		&i.FeaturedSectionID,
		&i.ArticleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFeaturedSection = `-- name: CreateFeaturedSection :one
INSERT INTO featured_sections (title)
VALUES ($1)
RETURNING id, title, created_at, updated_at
`

func (q *Queries) CreateFeaturedSection(ctx context.Context, title string) (FeaturedSection, error) {
	row := q.db.QueryRowContext(ctx, createFeaturedSection, title)
	var i FeaturedSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeaturedArticle = `-- name: DeleteFeaturedArticle :exec
DELETE FROM featured_articles
WHERE id = $1
`

func (q *Queries) DeleteFeaturedArticle(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeaturedArticle, id)
	return err
}

const deleteFeaturedSection = `-- name: DeleteFeaturedSection :exec
DELETE FROM featured_sections
WHERE id = $1
`

func (q *Queries) DeleteFeaturedSection(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeaturedSection, id)
	return err
}

const getAllFeaturedSectionsWithArticles = `-- name: GetAllFeaturedSectionsWithArticles :many
SELECT 
    fs.id AS section_id,
    fs.title AS section_title,
    fa.id AS featured_article_id,
    fa.article_id AS article_id,
    a.title AS article_title,
    a.content AS article_content,
    fa.created_at AS featured_article_created_at,
    fa.updated_at AS featured_article_updated_at
FROM 
    featured_sections fs
LEFT JOIN 
    featured_articles fa ON fs.id = fa.featured_section_id
LEFT JOIN 
    articles a ON fa.article_id = a.id
ORDER BY 
    fs.title, fa.created_at DESC
`

type GetAllFeaturedSectionsWithArticlesRow struct {
	SectionID                uuid.UUID
	SectionTitle             string
	FeaturedArticleID        uuid.NullUUID
	ArticleID                uuid.NullUUID
	ArticleTitle             sql.NullString
	ArticleContent           sql.NullString
	FeaturedArticleCreatedAt sql.NullTime
	FeaturedArticleUpdatedAt sql.NullTime
}

func (q *Queries) GetAllFeaturedSectionsWithArticles(ctx context.Context) ([]GetAllFeaturedSectionsWithArticlesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeaturedSectionsWithArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeaturedSectionsWithArticlesRow
	for rows.Next() {
		var i GetAllFeaturedSectionsWithArticlesRow
		if err := rows.Scan(
			&i.SectionID,
			&i.SectionTitle,
			&i.FeaturedArticleID,
			&i.ArticleID,
			&i.ArticleTitle,
			&i.ArticleContent,
			&i.FeaturedArticleCreatedAt,
			&i.FeaturedArticleUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturedArticle = `-- name: GetFeaturedArticle :one
SELECT id, featured_section_id, article_id, created_at, updated_at
FROM featured_articles
WHERE id = $1
`

func (q *Queries) GetFeaturedArticle(ctx context.Context, id uuid.UUID) (FeaturedArticle, error) {
	row := q.db.QueryRowContext(ctx, getFeaturedArticle, id)
	var i FeaturedArticle
	err := row.Scan(
		&i.ID,
		&i.FeaturedSectionID,
		&i.ArticleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeaturedArticlesBySection = `-- name: GetFeaturedArticlesBySection :many
SELECT id, featured_section_id, article_id, created_at, updated_at
FROM featured_articles
WHERE featured_section_id = $1
`

func (q *Queries) GetFeaturedArticlesBySection(ctx context.Context, featuredSectionID uuid.NullUUID) ([]FeaturedArticle, error) {
	rows, err := q.db.QueryContext(ctx, getFeaturedArticlesBySection, featuredSectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeaturedArticle
	for rows.Next() {
		var i FeaturedArticle
		if err := rows.Scan(
			&i.ID,
			&i.FeaturedSectionID,
			&i.ArticleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturedSection = `-- name: GetFeaturedSection :one
SELECT id, title, created_at, updated_at
FROM featured_sections
WHERE id = $1
`

func (q *Queries) GetFeaturedSection(ctx context.Context, id uuid.UUID) (FeaturedSection, error) {
	row := q.db.QueryRowContext(ctx, getFeaturedSection, id)
	var i FeaturedSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeaturedSectionWithArticles = `-- name: GetFeaturedSectionWithArticles :one
SELECT 
    fs.id AS section_id,
    fs.title AS section_title,
    fa.id AS featured_article_id,
    fa.article_id AS article_id,
    a.title AS article_title,
    a.content AS article_content,
    fa.created_at AS featured_article_created_at,
    fa.updated_at AS featured_article_updated_at
FROM 
    featured_sections fs
LEFT JOIN 
    featured_articles fa ON fs.id = fa.featured_section_id
LEFT JOIN 
    articles a ON fa.article_id = a.id
WHERE 
    fs.id = $1  -- Pass the featured section ID as a parameter
ORDER BY 
    fa.created_at DESC
`

type GetFeaturedSectionWithArticlesRow struct {
	SectionID                uuid.UUID
	SectionTitle             string
	FeaturedArticleID        uuid.NullUUID
	ArticleID                uuid.NullUUID
	ArticleTitle             sql.NullString
	ArticleContent           sql.NullString
	FeaturedArticleCreatedAt sql.NullTime
	FeaturedArticleUpdatedAt sql.NullTime
}

func (q *Queries) GetFeaturedSectionWithArticles(ctx context.Context, id uuid.UUID) (GetFeaturedSectionWithArticlesRow, error) {
	row := q.db.QueryRowContext(ctx, getFeaturedSectionWithArticles, id)
	var i GetFeaturedSectionWithArticlesRow
	err := row.Scan(
		&i.SectionID,
		&i.SectionTitle,
		&i.FeaturedArticleID,
		&i.ArticleID,
		&i.ArticleTitle,
		&i.ArticleContent,
		&i.FeaturedArticleCreatedAt,
		&i.FeaturedArticleUpdatedAt,
	)
	return i, err
}

const updateFeaturedArticle = `-- name: UpdateFeaturedArticle :one
UPDATE featured_articles
SET featured_section_id = $1, article_id = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $3
RETURNING id, featured_section_id, article_id, created_at, updated_at
`

type UpdateFeaturedArticleParams struct {
	FeaturedSectionID uuid.NullUUID
	ArticleID         uuid.NullUUID
	ID                uuid.UUID
}

func (q *Queries) UpdateFeaturedArticle(ctx context.Context, arg UpdateFeaturedArticleParams) (FeaturedArticle, error) {
	row := q.db.QueryRowContext(ctx, updateFeaturedArticle, arg.FeaturedSectionID, arg.ArticleID, arg.ID)
	var i FeaturedArticle
	err := row.Scan(
		&i.ID,
		&i.FeaturedSectionID,
		&i.ArticleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFeaturedSection = `-- name: UpdateFeaturedSection :one
UPDATE featured_sections
SET title = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
RETURNING id, title, created_at, updated_at
`

type UpdateFeaturedSectionParams struct {
	Title string
	ID    uuid.UUID
}

func (q *Queries) UpdateFeaturedSection(ctx context.Context, arg UpdateFeaturedSectionParams) (FeaturedSection, error) {
	row := q.db.QueryRowContext(ctx, updateFeaturedSection, arg.Title, arg.ID)
	var i FeaturedSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

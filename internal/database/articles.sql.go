// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: articles.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (title, content, category_id)
VALUES ($1, $2, $3)
RETURNING id, title, content, category_id, created_at, updated_at
`

type CreateArticleParams struct {
	Title      string
	Content    string
	CategoryID uuid.NullUUID
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle, arg.Title, arg.Content, arg.CategoryID)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getAllArticles = `-- name: GetAllArticles :many
SELECT id, title, content, category_id, created_at, updated_at
FROM articles
ORDER BY created_at DESC
`

func (q *Queries) GetAllArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, content, category_id, created_at, updated_at
FROM articles
WHERE id = $1
`

func (q *Queries) GetArticle(ctx context.Context, id uuid.UUID) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
SET title = $1, content = $2, category_id = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, title, content, category_id, created_at, updated_at
`

type UpdateArticleParams struct {
	Title      string
	Content    string
	CategoryID uuid.NullUUID
	ID         uuid.UUID
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, updateArticle,
		arg.Title,
		arg.Content,
		arg.CategoryID,
		arg.ID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

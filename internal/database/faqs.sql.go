// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: faqs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFAQ = `-- name: CreateFAQ :one
INSERT INTO faqs (question, answer, updated_at)
VALUES ($1, $2, CURRENT_TIMESTAMP)
RETURNING id, question, answer, created_at, updated_at
`

type CreateFAQParams struct {
	Question string
	Answer   string
}

func (q *Queries) CreateFAQ(ctx context.Context, arg CreateFAQParams) (Faq, error) {
	row := q.db.QueryRowContext(ctx, createFAQ, arg.Question, arg.Answer)
	var i Faq
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFAQ = `-- name: DeleteFAQ :exec
DELETE FROM faqs WHERE id = $1
`

func (q *Queries) DeleteFAQ(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFAQ, id)
	return err
}

const getFAQ = `-- name: GetFAQ :one
SELECT id, question, answer, created_at, updated_at FROM faqs WHERE id = $1
`

func (q *Queries) GetFAQ(ctx context.Context, id uuid.UUID) (Faq, error) {
	row := q.db.QueryRowContext(ctx, getFAQ, id)
	var i Faq
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFAQs = `-- name: GetFAQs :many
SELECT id, question, answer, created_at, updated_at FROM faqs
`

func (q *Queries) GetFAQs(ctx context.Context) ([]Faq, error) {
	rows, err := q.db.QueryContext(ctx, getFAQs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Faq
	for rows.Next() {
		var i Faq
		if err := rows.Scan(
			&i.ID,
			&i.Question,
			&i.Answer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFAQ = `-- name: UpdateFAQ :one
UPDATE faqs
SET question = $2, answer = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, question, answer, created_at, updated_at
`

type UpdateFAQParams struct {
	ID       uuid.UUID
	Question string
	Answer   string
}

func (q *Queries) UpdateFAQ(ctx context.Context, arg UpdateFAQParams) (Faq, error) {
	row := q.db.QueryRowContext(ctx, updateFAQ, arg.ID, arg.Question, arg.Answer)
	var i Faq
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: push_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPushToken = `-- name: CreatePushToken :one
INSERT INTO push_tokens (token, fingerprint, provider, app_id)
VALUES ($1, $2, $3, $4)
RETURNING id, token, provider, fingerprint, app_id, created_at, updated_at
`

type CreatePushTokenParams struct {
	Token       string
	Fingerprint string
	Provider    ProviderType
	AppID       uuid.NullUUID
}

func (q *Queries) CreatePushToken(ctx context.Context, arg CreatePushTokenParams) (PushToken, error) {
	row := q.db.QueryRowContext(ctx, createPushToken,
		arg.Token,
		arg.Fingerprint,
		arg.Provider,
		arg.AppID,
	)
	var i PushToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Provider,
		&i.Fingerprint,
		&i.AppID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePushToken = `-- name: DeletePushToken :exec
DELETE FROM push_tokens WHERE token = $1
`

func (q *Queries) DeletePushToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deletePushToken, token)
	return err
}

const deletePushTokensByFingerprint = `-- name: DeletePushTokensByFingerprint :exec
DELETE FROM push_tokens WHERE fingerprint = $1
`

func (q *Queries) DeletePushTokensByFingerprint(ctx context.Context, fingerprint string) error {
	_, err := q.db.ExecContext(ctx, deletePushTokensByFingerprint, fingerprint)
	return err
}

const getPushToken = `-- name: GetPushToken :one
SELECT id, token, provider, fingerprint, app_id, created_at, updated_at FROM push_tokens WHERE token = $1
`

func (q *Queries) GetPushToken(ctx context.Context, token string) (PushToken, error) {
	row := q.db.QueryRowContext(ctx, getPushToken, token)
	var i PushToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Provider,
		&i.Fingerprint,
		&i.AppID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPushTokenesByAppID = `-- name: GetPushTokenesByAppID :one
SELECT id, token, provider, fingerprint, app_id, created_at, updated_at FROM push_tokens WHERE app_id = $1
`

func (q *Queries) GetPushTokenesByAppID(ctx context.Context, appID uuid.NullUUID) (PushToken, error) {
	row := q.db.QueryRowContext(ctx, getPushTokenesByAppID, appID)
	var i PushToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Provider,
		&i.Fingerprint,
		&i.AppID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPushTokensByFingerprint = `-- name: GetPushTokensByFingerprint :many
SELECT id, token, provider, fingerprint, app_id, created_at, updated_at FROM push_tokens WHERE fingerprint = $1
`

func (q *Queries) GetPushTokensByFingerprint(ctx context.Context, fingerprint string) ([]PushToken, error) {
	rows, err := q.db.QueryContext(ctx, getPushTokensByFingerprint, fingerprint)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PushToken
	for rows.Next() {
		var i PushToken
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Provider,
			&i.Fingerprint,
			&i.AppID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPushTokensByID = `-- name: GetPushTokensByID :one
SELECT id, token, provider, fingerprint, app_id, created_at, updated_at FROM push_tokens WHERE id = $1
`

func (q *Queries) GetPushTokensByID(ctx context.Context, id uuid.UUID) (PushToken, error) {
	row := q.db.QueryRowContext(ctx, getPushTokensByID, id)
	var i PushToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Provider,
		&i.Fingerprint,
		&i.AppID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: push_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPushToken = `-- name: CreatePushToken :one
INSERT INTO push_tokens (token, provider, user_id)
VALUES ($1, $2, $3)
RETURNING id, token, provider, user_id, created_at, updated_at
`

type CreatePushTokenParams struct {
	Token    string
	Provider ProviderType
	UserID   uuid.UUID
}

func (q *Queries) CreatePushToken(ctx context.Context, arg CreatePushTokenParams) (PushToken, error) {
	row := q.db.QueryRowContext(ctx, createPushToken, arg.Token, arg.Provider, arg.UserID)
	var i PushToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Provider,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePushToken = `-- name: DeletePushToken :exec
DELETE FROM push_tokens WHERE token = $1
`

func (q *Queries) DeletePushToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deletePushToken, token)
	return err
}

const deletePushTokensByUserID = `-- name: DeletePushTokensByUserID :exec
DELETE FROM push_tokens WHERE user_id = $1
`

func (q *Queries) DeletePushTokensByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePushTokensByUserID, userID)
	return err
}

const deletePushTokensByUserIDAndProvider = `-- name: DeletePushTokensByUserIDAndProvider :exec
DELETE FROM push_tokens WHERE user_id = $1 AND provider = $2
`

type DeletePushTokensByUserIDAndProviderParams struct {
	UserID   uuid.UUID
	Provider ProviderType
}

func (q *Queries) DeletePushTokensByUserIDAndProvider(ctx context.Context, arg DeletePushTokensByUserIDAndProviderParams) error {
	_, err := q.db.ExecContext(ctx, deletePushTokensByUserIDAndProvider, arg.UserID, arg.Provider)
	return err
}

const getPushToken = `-- name: GetPushToken :one
SELECT id, token, provider, user_id, created_at, updated_at FROM push_tokens WHERE token = $1
`

func (q *Queries) GetPushToken(ctx context.Context, token string) (PushToken, error) {
	row := q.db.QueryRowContext(ctx, getPushToken, token)
	var i PushToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Provider,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPushTokensByUserID = `-- name: GetPushTokensByUserID :many
SELECT id, token, provider, user_id, created_at, updated_at FROM push_tokens WHERE user_id = $1
`

func (q *Queries) GetPushTokensByUserID(ctx context.Context, userID uuid.UUID) ([]PushToken, error) {
	rows, err := q.db.QueryContext(ctx, getPushTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PushToken
	for rows.Next() {
		var i PushToken
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Provider,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPushTokensByUserIDAndProvider = `-- name: GetPushTokensByUserIDAndProvider :many
SELECT id, token, provider, user_id, created_at, updated_at FROM push_tokens WHERE user_id = $1 AND provider = $2
`

type GetPushTokensByUserIDAndProviderParams struct {
	UserID   uuid.UUID
	Provider ProviderType
}

func (q *Queries) GetPushTokensByUserIDAndProvider(ctx context.Context, arg GetPushTokensByUserIDAndProviderParams) ([]PushToken, error) {
	rows, err := q.db.QueryContext(ctx, getPushTokensByUserIDAndProvider, arg.UserID, arg.Provider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PushToken
	for rows.Next() {
		var i PushToken
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Provider,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: channels.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createChannel = `-- name: CreateChannel :exec
INSERT INTO channels (user_id, platform, server, secret, enabled, custom)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateChannelParams struct {
	UserID   uuid.UUID
	Platform string
	Server   string
	Secret   string
	Enabled  bool
	Custom   bool
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) error {
	_, err := q.db.ExecContext(ctx, createChannel,
		arg.UserID,
		arg.Platform,
		arg.Server,
		arg.Secret,
		arg.Enabled,
		arg.Custom,
	)
	return err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels WHERE id = $1 AND user_id = $2
`

type DeleteChannelParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteChannel(ctx context.Context, arg DeleteChannelParams) error {
	_, err := q.db.ExecContext(ctx, deleteChannel, arg.ID, arg.UserID)
	return err
}

const getChannel = `-- name: GetChannel :one
SELECT id, user_id, platform, server, secret, enabled, custom, created_at, updated_at FROM channels WHERE id = $1 AND user_id = $2
`

type GetChannelParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetChannel(ctx context.Context, arg GetChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannel, arg.ID, arg.UserID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Platform,
		&i.Server,
		&i.Secret,
		&i.Enabled,
		&i.Custom,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannels = `-- name: GetChannels :many
SELECT id, user_id, platform, server, secret, enabled, custom, created_at, updated_at FROM channels WHERE user_id = $1
`

func (q *Queries) GetChannels(ctx context.Context, userID uuid.UUID) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannels, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Platform,
			&i.Server,
			&i.Secret,
			&i.Enabled,
			&i.Custom,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :exec
UPDATE channels
SET platform = $3, server = $4, secret = $5, enabled = $6, custom = $7, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
`

type UpdateChannelParams struct {
	ID       uuid.UUID
	UserID   uuid.UUID
	Platform string
	Server   string
	Secret   string
	Enabled  bool
	Custom   bool
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) error {
	_, err := q.db.ExecContext(ctx, updateChannel,
		arg.ID,
		arg.UserID,
		arg.Platform,
		arg.Server,
		arg.Secret,
		arg.Enabled,
		arg.Custom,
	)
	return err
}

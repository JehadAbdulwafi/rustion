// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feedback.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeedback = `-- name: CreateFeedback :one
INSERT INTO feedbacks (subject, type, message, user_id, updated_at)
VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
RETURNING id, user_id, subject, type, message, created_at, updated_at
`

type CreateFeedbackParams struct {
	Subject string
	Type    FeedbackTypeEnum
	Message string
	UserID  uuid.NullUUID
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, createFeedback,
		arg.Subject,
		arg.Type,
		arg.Message,
		arg.UserID,
	)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Subject,
		&i.Type,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeedback = `-- name: DeleteFeedback :exec
DELETE FROM feedbacks
WHERE id = $1
`

func (q *Queries) DeleteFeedback(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeedback, id)
	return err
}

const getFeedbacks = `-- name: GetFeedbacks :many
SELECT id, user_id, subject, type, message, created_at, updated_at
FROM feedbacks
ORDER BY created_at DESC
`

func (q *Queries) GetFeedbacks(ctx context.Context) ([]Feedback, error) {
	rows, err := q.db.QueryContext(ctx, getFeedbacks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feedback
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Subject,
			&i.Type,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedbacksByUserID = `-- name: GetFeedbacksByUserID :many
SELECT id, user_id, subject, type, message, created_at, updated_at
FROM feedbacks
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetFeedbacksByUserID(ctx context.Context, userID uuid.NullUUID) ([]Feedback, error) {
	rows, err := q.db.QueryContext(ctx, getFeedbacksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feedback
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Subject,
			&i.Type,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedback = `-- name: UpdateFeedback :one
UPDATE feedbacks
SET subject = $1, type = $2, message = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, user_id, subject, type, message, created_at, updated_at
`

type UpdateFeedbackParams struct {
	Subject string
	Type    FeedbackTypeEnum
	Message string
	ID      uuid.UUID
}

func (q *Queries) UpdateFeedback(ctx context.Context, arg UpdateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, updateFeedback,
		arg.Subject,
		arg.Type,
		arg.Message,
		arg.ID,
	)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Subject,
		&i.Type,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: streams.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createStream = `-- name: CreateStream :one
INSERT INTO streams (user_id, app, stream_name, url)
VALUES ($1, $2, $3, $4)
RETURNING id, app, stream_name, url, user_id, created_at, updated_at
`

type CreateStreamParams struct {
	UserID     uuid.UUID
	App        string
	StreamName string
	Url        string
}

func (q *Queries) CreateStream(ctx context.Context, arg CreateStreamParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, createStream,
		arg.UserID,
		arg.App,
		arg.StreamName,
		arg.Url,
	)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.App,
		&i.StreamName,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createStreamDetails = `-- name: CreateStreamDetails :one
INSERT INTO stream_details (stream_id, title, description)
VALUES ($1, $2, $3)
RETURNING id, stream_id, title, description, created_at, updated_at
`

type CreateStreamDetailsParams struct {
	StreamID    uuid.UUID
	Title       string
	Description string
}

func (q *Queries) CreateStreamDetails(ctx context.Context, arg CreateStreamDetailsParams) (StreamDetail, error) {
	row := q.db.QueryRowContext(ctx, createStreamDetails, arg.StreamID, arg.Title, arg.Description)
	var i StreamDetail
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createStreamStatus = `-- name: CreateStreamStatus :one
INSERT INTO stream_status (stream_id, status, est_start_time, last_published_at, viewers_count)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, stream_id, status, est_start_time, last_published_at, viewers_count, created_at, updated_at
`

type CreateStreamStatusParams struct {
	StreamID        uuid.UUID
	Status          StreamStatusEnum
	EstStartTime    sql.NullTime
	LastPublishedAt sql.NullTime
	ViewersCount    sql.NullInt32
}

func (q *Queries) CreateStreamStatus(ctx context.Context, arg CreateStreamStatusParams) (StreamStatus, error) {
	row := q.db.QueryRowContext(ctx, createStreamStatus,
		arg.StreamID,
		arg.Status,
		arg.EstStartTime,
		arg.LastPublishedAt,
		arg.ViewersCount,
	)
	var i StreamStatus
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Status,
		&i.EstStartTime,
		&i.LastPublishedAt,
		&i.ViewersCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementStreamStatusViewersCount = `-- name: DecrementStreamStatusViewersCount :exec
UPDATE stream_status
SET viewers_count = viewers_count - 1
WHERE stream_id = $1
`

func (q *Queries) DecrementStreamStatusViewersCount(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, decrementStreamStatusViewersCount, streamID)
	return err
}

const deleteStream = `-- name: DeleteStream :exec
DELETE FROM streams WHERE id = $1
`

func (q *Queries) DeleteStream(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStream, id)
	return err
}

const deleteStreamDetails = `-- name: DeleteStreamDetails :exec
DELETE FROM stream_details WHERE stream_id = $1
`

func (q *Queries) DeleteStreamDetails(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStreamDetails, streamID)
	return err
}

const deleteStreamStatus = `-- name: DeleteStreamStatus :exec
DELETE FROM stream_status WHERE stream_id = $1
`

func (q *Queries) DeleteStreamStatus(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStreamStatus, streamID)
	return err
}

const getStream = `-- name: GetStream :one
SELECT id, app, stream_name, url, user_id, created_at, updated_at FROM streams WHERE id = $1
`

func (q *Queries) GetStream(ctx context.Context, id uuid.UUID) (Stream, error) {
	row := q.db.QueryRowContext(ctx, getStream, id)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.App,
		&i.StreamName,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreamDetails = `-- name: GetStreamDetails :one
SELECT id, stream_id, title, description, created_at, updated_at FROM stream_details WHERE stream_id = $1
`

func (q *Queries) GetStreamDetails(ctx context.Context, streamID uuid.UUID) (StreamDetail, error) {
	row := q.db.QueryRowContext(ctx, getStreamDetails, streamID)
	var i StreamDetail
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreamStatus = `-- name: GetStreamStatus :one
SELECT id, stream_id, status, est_start_time, last_published_at, viewers_count, created_at, updated_at FROM stream_status WHERE stream_id = $1
`

func (q *Queries) GetStreamStatus(ctx context.Context, streamID uuid.UUID) (StreamStatus, error) {
	row := q.db.QueryRowContext(ctx, getStreamStatus, streamID)
	var i StreamStatus
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Status,
		&i.EstStartTime,
		&i.LastPublishedAt,
		&i.ViewersCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreamsByApp = `-- name: GetStreamsByApp :many
SELECT id, app, stream_name, url, user_id, created_at, updated_at FROM streams WHERE app = $1
`

func (q *Queries) GetStreamsByApp(ctx context.Context, app string) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, getStreamsByApp, app)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stream
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.App,
			&i.StreamName,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreamsByStreamName = `-- name: GetStreamsByStreamName :many
SELECT id, app, stream_name, url, user_id, created_at, updated_at FROM streams WHERE stream_name = $1
`

func (q *Queries) GetStreamsByStreamName(ctx context.Context, streamName string) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, getStreamsByStreamName, streamName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stream
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.App,
			&i.StreamName,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreamsByUserId = `-- name: GetStreamsByUserId :many
SELECT id, app, stream_name, url, user_id, created_at, updated_at FROM streams WHERE user_id = $1
`

func (q *Queries) GetStreamsByUserId(ctx context.Context, userID uuid.UUID) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, getStreamsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stream
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.App,
			&i.StreamName,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementStreamStatusViewersCount = `-- name: IncrementStreamStatusViewersCount :exec
UPDATE stream_status
SET viewers_count = viewers_count + 1
WHERE stream_id = $1
`

func (q *Queries) IncrementStreamStatusViewersCount(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementStreamStatusViewersCount, streamID)
	return err
}

const publishStream = `-- name: PublishStream :exec
UPDATE stream_status
SET status = 'online', last_published_at = CURRENT_TIMESTAMP
WHERE stream_id = $1
`

func (q *Queries) PublishStream(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, publishStream, streamID)
	return err
}

const scheduleStream = `-- name: ScheduleStream :exec
UPDATE stream_status
SET status = 'scheduled', est_start_time = $2
WHERE stream_id = $1
`

type ScheduleStreamParams struct {
	StreamID     uuid.UUID
	EstStartTime sql.NullTime
}

func (q *Queries) ScheduleStream(ctx context.Context, arg ScheduleStreamParams) error {
	_, err := q.db.ExecContext(ctx, scheduleStream, arg.StreamID, arg.EstStartTime)
	return err
}

const stopStream = `-- name: StopStream :exec
UPDATE stream_status
SET status = 'offline', last_published_at = CURRENT_TIMESTAMP
WHERE stream_id = $1
`

func (q *Queries) StopStream(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, stopStream, streamID)
	return err
}

const updateStream = `-- name: UpdateStream :one
UPDATE streams
SET app = $2, stream_name = $3, url = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, app, stream_name, url, user_id, created_at, updated_at
`

type UpdateStreamParams struct {
	ID         uuid.UUID
	App        string
	StreamName string
	Url        string
}

func (q *Queries) UpdateStream(ctx context.Context, arg UpdateStreamParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, updateStream,
		arg.ID,
		arg.App,
		arg.StreamName,
		arg.Url,
	)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.App,
		&i.StreamName,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStreamDetails = `-- name: UpdateStreamDetails :one
UPDATE stream_details
SET title = $2, description = $3, updated_at = CURRENT_TIMESTAMP
WHERE stream_id = $1
RETURNING id, stream_id, title, description, created_at, updated_at
`

type UpdateStreamDetailsParams struct {
	StreamID    uuid.UUID
	Title       string
	Description string
}

func (q *Queries) UpdateStreamDetails(ctx context.Context, arg UpdateStreamDetailsParams) (StreamDetail, error) {
	row := q.db.QueryRowContext(ctx, updateStreamDetails, arg.StreamID, arg.Title, arg.Description)
	var i StreamDetail
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStreamStatus = `-- name: UpdateStreamStatus :one
UPDATE stream_status
SET status = $2, est_start_time = $3, last_published_at = $4, viewers_count = $5
WHERE stream_id = $1
RETURNING id, stream_id, status, est_start_time, last_published_at, viewers_count, created_at, updated_at
`

type UpdateStreamStatusParams struct {
	StreamID        uuid.UUID
	Status          StreamStatusEnum
	EstStartTime    sql.NullTime
	LastPublishedAt sql.NullTime
	ViewersCount    sql.NullInt32
}

func (q *Queries) UpdateStreamStatus(ctx context.Context, arg UpdateStreamStatusParams) (StreamStatus, error) {
	row := q.db.QueryRowContext(ctx, updateStreamStatus,
		arg.StreamID,
		arg.Status,
		arg.EstStartTime,
		arg.LastPublishedAt,
		arg.ViewersCount,
	)
	var i StreamStatus
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Status,
		&i.EstStartTime,
		&i.LastPublishedAt,
		&i.ViewersCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStreamStatusViewersCount = `-- name: UpdateStreamStatusViewersCount :exec
UPDATE stream_status
SET viewers_count = $2
WHERE stream_id = $1
`

type UpdateStreamStatusViewersCountParams struct {
	StreamID     uuid.UUID
	ViewersCount sql.NullInt32
}

func (q *Queries) UpdateStreamStatusViewersCount(ctx context.Context, arg UpdateStreamStatusViewersCountParams) error {
	_, err := q.db.ExecContext(ctx, updateStreamStatusViewersCount, arg.StreamID, arg.ViewersCount)
	return err
}

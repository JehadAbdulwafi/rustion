// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: streams.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createStream = `-- name: CreateStream :one
INSERT INTO streams (user_id, app, name, url, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, app, name, url, password, thumbnail, status, viewers, last_published_at, live_title, live_description, created_at, updated_at
`

type CreateStreamParams struct {
	UserID   uuid.UUID
	App      string
	Name     string
	Url      string
	Password string
}

func (q *Queries) CreateStream(ctx context.Context, arg CreateStreamParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, createStream,
		arg.UserID,
		arg.App,
		arg.Name,
		arg.Url,
		arg.Password,
	)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.App,
		&i.Name,
		&i.Url,
		&i.Password,
		&i.Thumbnail,
		&i.Status,
		&i.Viewers,
		&i.LastPublishedAt,
		&i.LiveTitle,
		&i.LiveDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementStreamViewers = `-- name: DecrementStreamViewers :exec
UPDATE streams
SET viewers = viewers - 1
WHERE id = $1
`

func (q *Queries) DecrementStreamViewers(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, decrementStreamViewers, id)
	return err
}

const deleteStream = `-- name: DeleteStream :exec
DELETE FROM streams WHERE id = $1
`

func (q *Queries) DeleteStream(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStream, id)
	return err
}

const getStream = `-- name: GetStream :one
SELECT id, user_id, app, name, url, status, viewers, thumbnail, live_title, live_description, last_published_at FROM streams where id = $1
`

type GetStreamRow struct {
	ID              uuid.UUID
	UserID          uuid.UUID
	App             string
	Name            string
	Url             string
	Status          StreamStatusEnum
	Viewers         sql.NullInt32
	Thumbnail       sql.NullString
	LiveTitle       sql.NullString
	LiveDescription sql.NullString
	LastPublishedAt sql.NullTime
}

func (q *Queries) GetStream(ctx context.Context, id uuid.UUID) (GetStreamRow, error) {
	row := q.db.QueryRowContext(ctx, getStream, id)
	var i GetStreamRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.App,
		&i.Name,
		&i.Url,
		&i.Status,
		&i.Viewers,
		&i.Thumbnail,
		&i.LiveTitle,
		&i.LiveDescription,
		&i.LastPublishedAt,
	)
	return i, err
}

const getStreamById = `-- name: GetStreamById :one
SELECT id, user_id, app, name, url, password, thumbnail, status, viewers, last_published_at, live_title, live_description, created_at, updated_at FROM streams WHERE id = $1
`

func (q *Queries) GetStreamById(ctx context.Context, id uuid.UUID) (Stream, error) {
	row := q.db.QueryRowContext(ctx, getStreamById, id)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.App,
		&i.Name,
		&i.Url,
		&i.Password,
		&i.Thumbnail,
		&i.Status,
		&i.Viewers,
		&i.LastPublishedAt,
		&i.LiveTitle,
		&i.LiveDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreamByStreamName = `-- name: GetStreamByStreamName :one
SELECT id, user_id, app, name, url, password, thumbnail, status, viewers, last_published_at, live_title, live_description, created_at, updated_at FROM streams WHERE name = $1
`

func (q *Queries) GetStreamByStreamName(ctx context.Context, name string) (Stream, error) {
	row := q.db.QueryRowContext(ctx, getStreamByStreamName, name)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.App,
		&i.Name,
		&i.Url,
		&i.Password,
		&i.Thumbnail,
		&i.Status,
		&i.Viewers,
		&i.LastPublishedAt,
		&i.LiveTitle,
		&i.LiveDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreams = `-- name: GetStreams :many
SELECT id, user_id, app, name, url, status, viewers, thumbnail, live_title, live_description, last_published_at FROM streams
`

type GetStreamsRow struct {
	ID              uuid.UUID
	UserID          uuid.UUID
	App             string
	Name            string
	Url             string
	Status          StreamStatusEnum
	Viewers         sql.NullInt32
	Thumbnail       sql.NullString
	LiveTitle       sql.NullString
	LiveDescription sql.NullString
	LastPublishedAt sql.NullTime
}

func (q *Queries) GetStreams(ctx context.Context) ([]GetStreamsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStreams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStreamsRow
	for rows.Next() {
		var i GetStreamsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.App,
			&i.Name,
			&i.Url,
			&i.Status,
			&i.Viewers,
			&i.Thumbnail,
			&i.LiveTitle,
			&i.LiveDescription,
			&i.LastPublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreamsByApp = `-- name: GetStreamsByApp :many
SELECT id, user_id, app, name, url, password, thumbnail, status, viewers, last_published_at, live_title, live_description, created_at, updated_at FROM streams WHERE app = $1
`

func (q *Queries) GetStreamsByApp(ctx context.Context, app string) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, getStreamsByApp, app)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stream
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.App,
			&i.Name,
			&i.Url,
			&i.Password,
			&i.Thumbnail,
			&i.Status,
			&i.Viewers,
			&i.LastPublishedAt,
			&i.LiveTitle,
			&i.LiveDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreamsByUserId = `-- name: GetStreamsByUserId :many
SELECT id, user_id, app, name, url, password, thumbnail, status, viewers, last_published_at, live_title, live_description, created_at, updated_at FROM streams WHERE user_id = $1
`

func (q *Queries) GetStreamsByUserId(ctx context.Context, userID uuid.UUID) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, getStreamsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stream
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.App,
			&i.Name,
			&i.Url,
			&i.Password,
			&i.Thumbnail,
			&i.Status,
			&i.Viewers,
			&i.LastPublishedAt,
			&i.LiveTitle,
			&i.LiveDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementStreamViewers = `-- name: IncrementStreamViewers :exec
UPDATE streams
SET viewers = viewers + 1
WHERE id = $1
`

func (q *Queries) IncrementStreamViewers(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementStreamViewers, id)
	return err
}

const publishStream = `-- name: PublishStream :exec
UPDATE streams
SET status = 'published', last_published_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) PublishStream(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, publishStream, id)
	return err
}

const unpublishStream = `-- name: UnpublishStream :exec
UPDATE streams
SET status = 'unpublished', last_published_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UnpublishStream(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, unpublishStream, id)
	return err
}

const updateStream = `-- name: UpdateStream :exec
UPDATE streams
SET app = $2, name = $3, url = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateStreamParams struct {
	ID   uuid.UUID
	App  string
	Name string
	Url  string
}

func (q *Queries) UpdateStream(ctx context.Context, arg UpdateStreamParams) error {
	_, err := q.db.ExecContext(ctx, updateStream,
		arg.ID,
		arg.App,
		arg.Name,
		arg.Url,
	)
	return err
}

const updateStreamInfo = `-- name: UpdateStreamInfo :one
UPDATE streams
SET live_title = $2, live_description = $3, thumbnail = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, app, name, url, password, thumbnail, status, viewers, last_published_at, live_title, live_description, created_at, updated_at
`

type UpdateStreamInfoParams struct {
	ID              uuid.UUID
	LiveTitle       sql.NullString
	LiveDescription sql.NullString
	Thumbnail       sql.NullString
}

func (q *Queries) UpdateStreamInfo(ctx context.Context, arg UpdateStreamInfoParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, updateStreamInfo,
		arg.ID,
		arg.LiveTitle,
		arg.LiveDescription,
		arg.Thumbnail,
	)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.App,
		&i.Name,
		&i.Url,
		&i.Password,
		&i.Thumbnail,
		&i.Status,
		&i.Viewers,
		&i.LastPublishedAt,
		&i.LiveTitle,
		&i.LiveDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStreamName = `-- name: UpdateStreamName :exec
UPDATE streams
SET name = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateStreamNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateStreamName(ctx context.Context, arg UpdateStreamNameParams) error {
	_, err := q.db.ExecContext(ctx, updateStreamName, arg.ID, arg.Name)
	return err
}

const updateStreamPassword = `-- name: UpdateStreamPassword :exec
UPDATE streams
SET password = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateStreamPasswordParams struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) UpdateStreamPassword(ctx context.Context, arg UpdateStreamPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateStreamPassword, arg.ID, arg.Password)
	return err
}

const updateStreamViewers = `-- name: UpdateStreamViewers :exec
UPDATE streams
SET viewers = $2
WHERE id = $1
`

type UpdateStreamViewersParams struct {
	ID      uuid.UUID
	Viewers sql.NullInt32
}

func (q *Queries) UpdateStreamViewers(ctx context.Context, arg UpdateStreamViewersParams) error {
	_, err := q.db.ExecContext(ctx, updateStreamViewers, arg.ID, arg.Viewers)
	return err
}

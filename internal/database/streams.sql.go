// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: streams.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createStream = `-- name: CreateStream :one
INSERT INTO streams (user_id, app, stream_name, url)
VALUES ($1, $2, $3, $4)
RETURNING id, app, stream_name, url, user_id, created_at, updated_at
`

type CreateStreamParams struct {
	UserID     uuid.UUID
	App        string
	StreamName string
	Url        string
}

func (q *Queries) CreateStream(ctx context.Context, arg CreateStreamParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, createStream,
		arg.UserID,
		arg.App,
		arg.StreamName,
		arg.Url,
	)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.App,
		&i.StreamName,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createStreamMetadata = `-- name: CreateStreamMetadata :one
INSERT INTO stream_metadata (stream_id, title, description, thumbnail)
VALUES ($1, $2, $3, $4)
RETURNING id, stream_id, status, title, description, thumbnail, last_published_at, viewers, created_at, updated_at
`

type CreateStreamMetadataParams struct {
	StreamID    uuid.UUID
	Title       string
	Description string
	Thumbnail   sql.NullString
}

func (q *Queries) CreateStreamMetadata(ctx context.Context, arg CreateStreamMetadataParams) (StreamMetadatum, error) {
	row := q.db.QueryRowContext(ctx, createStreamMetadata,
		arg.StreamID,
		arg.Title,
		arg.Description,
		arg.Thumbnail,
	)
	var i StreamMetadatum
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Status,
		&i.Title,
		&i.Description,
		&i.Thumbnail,
		&i.LastPublishedAt,
		&i.Viewers,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementStreamViewers = `-- name: DecrementStreamViewers :exec
UPDATE stream_metadata
SET viewers = viewers - 1
WHERE stream_id = $1
`

func (q *Queries) DecrementStreamViewers(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, decrementStreamViewers, streamID)
	return err
}

const deleteStream = `-- name: DeleteStream :exec
DELETE FROM streams WHERE id = $1
`

func (q *Queries) DeleteStream(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStream, id)
	return err
}

const deleteStreamMetadata = `-- name: DeleteStreamMetadata :exec
DELETE FROM stream_metadata WHERE stream_id = $1
`

func (q *Queries) DeleteStreamMetadata(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStreamMetadata, streamID)
	return err
}

const getStream = `-- name: GetStream :one
SELECT id, app, stream_name, url, user_id, created_at, updated_at FROM streams WHERE id = $1
`

func (q *Queries) GetStream(ctx context.Context, id uuid.UUID) (Stream, error) {
	row := q.db.QueryRowContext(ctx, getStream, id)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.App,
		&i.StreamName,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreamByStreamName = `-- name: GetStreamByStreamName :one
SELECT id, app, stream_name, url, user_id, created_at, updated_at FROM streams WHERE stream_name = $1
`

func (q *Queries) GetStreamByStreamName(ctx context.Context, streamName string) (Stream, error) {
	row := q.db.QueryRowContext(ctx, getStreamByStreamName, streamName)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.App,
		&i.StreamName,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreamMetadata = `-- name: GetStreamMetadata :one
SELECT id, stream_id, status, title, description, thumbnail, last_published_at, viewers, created_at, updated_at FROM stream_metadata WHERE stream_id = $1
`

func (q *Queries) GetStreamMetadata(ctx context.Context, streamID uuid.UUID) (StreamMetadatum, error) {
	row := q.db.QueryRowContext(ctx, getStreamMetadata, streamID)
	var i StreamMetadatum
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Status,
		&i.Title,
		&i.Description,
		&i.Thumbnail,
		&i.LastPublishedAt,
		&i.Viewers,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreamsByApp = `-- name: GetStreamsByApp :many
SELECT id, app, stream_name, url, user_id, created_at, updated_at FROM streams WHERE app = $1
`

func (q *Queries) GetStreamsByApp(ctx context.Context, app string) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, getStreamsByApp, app)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stream
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.App,
			&i.StreamName,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreamsByUserId = `-- name: GetStreamsByUserId :many
SELECT id, app, stream_name, url, user_id, created_at, updated_at FROM streams WHERE user_id = $1
`

func (q *Queries) GetStreamsByUserId(ctx context.Context, userID uuid.UUID) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, getStreamsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stream
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.App,
			&i.StreamName,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementStreamViewers = `-- name: IncrementStreamViewers :exec
UPDATE stream_metadata
SET viewers = viewers + 1
WHERE stream_id = $1
`

func (q *Queries) IncrementStreamViewers(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementStreamViewers, streamID)
	return err
}

const publishStream = `-- name: PublishStream :exec
UPDATE stream_metadata
SET status = 'published', last_published_at = CURRENT_TIMESTAMP
WHERE stream_id = $1
`

func (q *Queries) PublishStream(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, publishStream, streamID)
	return err
}

const unpublishStream = `-- name: UnpublishStream :exec
UPDATE stream_metadata
SET status = 'unpublished', last_published_at = CURRENT_TIMESTAMP
WHERE stream_id = $1
`

func (q *Queries) UnpublishStream(ctx context.Context, streamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, unpublishStream, streamID)
	return err
}

const updateStream = `-- name: UpdateStream :one
UPDATE streams
SET app = $2, stream_name = $3, url = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, app, stream_name, url, user_id, created_at, updated_at
`

type UpdateStreamParams struct {
	ID         uuid.UUID
	App        string
	StreamName string
	Url        string
}

func (q *Queries) UpdateStream(ctx context.Context, arg UpdateStreamParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, updateStream,
		arg.ID,
		arg.App,
		arg.StreamName,
		arg.Url,
	)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.App,
		&i.StreamName,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStreamMetadataInfo = `-- name: UpdateStreamMetadataInfo :one
UPDATE stream_metadata
SET title = $2, description = $3, updated_at = CURRENT_TIMESTAMP
WHERE stream_id = $1
RETURNING id, stream_id, status, title, description, thumbnail, last_published_at, viewers, created_at, updated_at
`

type UpdateStreamMetadataInfoParams struct {
	StreamID    uuid.UUID
	Title       string
	Description string
}

func (q *Queries) UpdateStreamMetadataInfo(ctx context.Context, arg UpdateStreamMetadataInfoParams) (StreamMetadatum, error) {
	row := q.db.QueryRowContext(ctx, updateStreamMetadataInfo, arg.StreamID, arg.Title, arg.Description)
	var i StreamMetadatum
	err := row.Scan(
		&i.ID,
		&i.StreamID,
		&i.Status,
		&i.Title,
		&i.Description,
		&i.Thumbnail,
		&i.LastPublishedAt,
		&i.Viewers,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStreamViewers = `-- name: UpdateStreamViewers :exec
UPDATE stream_metadata
SET viewers = $2
WHERE stream_id = $1
`

type UpdateStreamViewersParams struct {
	StreamID uuid.UUID
	Viewers  sql.NullInt32
}

func (q *Queries) UpdateStreamViewers(ctx context.Context, arg UpdateStreamViewersParams) error {
	_, err := q.db.ExecContext(ctx, updateStreamViewers, arg.StreamID, arg.Viewers)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: plans.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createPlan = `-- name: CreatePlan :one
INSERT INTO plans (
    name, description, price_monthly, price_yearly, features, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, description, price_monthly, price_yearly, features, is_active, created_at, updated_at
`

type CreatePlanParams struct {
	Name         string
	Description  sql.NullString
	PriceMonthly string
	PriceYearly  string
	Features     json.RawMessage
	IsActive     bool
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (Plan, error) {
	row := q.db.QueryRowContext(ctx, createPlan,
		arg.Name,
		arg.Description,
		arg.PriceMonthly,
		arg.PriceYearly,
		arg.Features,
		arg.IsActive,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PriceMonthly,
		&i.PriceYearly,
		&i.Features,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivatePlan = `-- name: DeactivatePlan :one
UPDATE plans
SET is_active = false,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, description, price_monthly, price_yearly, features, is_active, created_at, updated_at
`

func (q *Queries) DeactivatePlan(ctx context.Context, id uuid.UUID) (Plan, error) {
	row := q.db.QueryRowContext(ctx, deactivatePlan, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PriceMonthly,
		&i.PriceYearly,
		&i.Features,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActivePlans = `-- name: GetActivePlans :many
SELECT id, name, description, price_monthly, price_yearly, features, is_active, created_at, updated_at FROM plans 
WHERE is_active = true 
ORDER BY price_monthly ASC
`

func (q *Queries) GetActivePlans(ctx context.Context) ([]Plan, error) {
	rows, err := q.db.QueryContext(ctx, getActivePlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PriceMonthly,
			&i.PriceYearly,
			&i.Features,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlan = `-- name: GetPlan :one
SELECT id, name, description, price_monthly, price_yearly, features, is_active, created_at, updated_at FROM plans WHERE id = $1
`

func (q *Queries) GetPlan(ctx context.Context, id uuid.UUID) (Plan, error) {
	row := q.db.QueryRowContext(ctx, getPlan, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PriceMonthly,
		&i.PriceYearly,
		&i.Features,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlans = `-- name: GetPlans :many
SELECT id, name, description, price_monthly, price_yearly, features, is_active, created_at, updated_at FROM plans ORDER BY price_monthly ASC
`

func (q *Queries) GetPlans(ctx context.Context) ([]Plan, error) {
	rows, err := q.db.QueryContext(ctx, getPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PriceMonthly,
			&i.PriceYearly,
			&i.Features,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE plans
SET name = $2,
    description = $3,
    price_monthly = $4,
    price_yearly = $5,
    features = $6,
    is_active = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, description, price_monthly, price_yearly, features, is_active, created_at, updated_at
`

type UpdatePlanParams struct {
	ID           uuid.UUID
	Name         string
	Description  sql.NullString
	PriceMonthly string
	PriceYearly  string
	Features     json.RawMessage
	IsActive     bool
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (Plan, error) {
	row := q.db.QueryRowContext(ctx, updatePlan,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.PriceMonthly,
		arg.PriceYearly,
		arg.Features,
		arg.IsActive,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PriceMonthly,
		&i.PriceYearly,
		&i.Features,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reset_password.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createResetPasswordToken = `-- name: CreateResetPasswordToken :one
INSERT INTO password_reset_tokens (user_id, valid_until)
VALUES ($1, $2)
RETURNING token, valid_until, user_id, created_at, updated_at
`

type CreateResetPasswordTokenParams struct {
	UserID     uuid.UUID
	ValidUntil time.Time
}

func (q *Queries) CreateResetPasswordToken(ctx context.Context, arg CreateResetPasswordTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, createResetPasswordToken, arg.UserID, arg.ValidUntil)
	var i PasswordResetToken
	err := row.Scan(
		&i.Token,
		&i.ValidUntil,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteResetPasswordToken = `-- name: DeleteResetPasswordToken :exec
DELETE FROM password_reset_tokens WHERE token = $1
`

func (q *Queries) DeleteResetPasswordToken(ctx context.Context, token uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteResetPasswordToken, token)
	return err
}

const getResetPasswordToken = `-- name: GetResetPasswordToken :one
SELECT token, valid_until, user_id, created_at, updated_at FROM password_reset_tokens WHERE token = $1
`

func (q *Queries) GetResetPasswordToken(ctx context.Context, token uuid.UUID) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getResetPasswordToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.Token,
		&i.ValidUntil,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResetPasswordTokenByUser = `-- name: GetResetPasswordTokenByUser :one
SELECT token, valid_until, user_id, created_at, updated_at FROM password_reset_tokens WHERE user_id = $1
`

func (q *Queries) GetResetPasswordTokenByUser(ctx context.Context, userID uuid.UUID) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getResetPasswordTokenByUser, userID)
	var i PasswordResetToken
	err := row.Scan(
		&i.Token,
		&i.ValidUntil,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserResetPasswordToken = `-- name: GetUserResetPasswordToken :one
SELECT token, valid_until, user_id, created_at, updated_at FROM password_reset_tokens
WHERE created_at > $2
AND valid_until > NOW()
AND user_id = $1
`

type GetUserResetPasswordTokenParams struct {
	UserID    uuid.UUID
	CreatedAt sql.NullTime
}

func (q *Queries) GetUserResetPasswordToken(ctx context.Context, arg GetUserResetPasswordTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getUserResetPasswordToken, arg.UserID, arg.CreatedAt)
	var i PasswordResetToken
	err := row.Scan(
		&i.Token,
		&i.ValidUntil,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

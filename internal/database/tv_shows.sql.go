// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tv_shows.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTVShow = `-- name: CreateTVShow :one
INSERT INTO tv_shows (title, genre, description, image, app_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, genre, description, image, app_id, created_at, updated_at
`

type CreateTVShowParams struct {
	Title       string
	Genre       sql.NullString
	Description sql.NullString
	Image       sql.NullString
	AppID       uuid.UUID
}

func (q *Queries) CreateTVShow(ctx context.Context, arg CreateTVShowParams) (TvShow, error) {
	row := q.db.QueryRowContext(ctx, createTVShow,
		arg.Title,
		arg.Genre,
		arg.Description,
		arg.Image,
		arg.AppID,
	)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.Description,
		&i.Image,
		&i.AppID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTVShow = `-- name: DeleteTVShow :exec
DELETE FROM tv_shows WHERE id = $1
`

func (q *Queries) DeleteTVShow(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTVShow, id)
	return err
}

const getAllTVShows = `-- name: GetAllTVShows :many
SELECT id, title, genre, description, image, app_id, created_at, updated_at FROM tv_shows WHERE app_id = $1
`

func (q *Queries) GetAllTVShows(ctx context.Context, appID uuid.UUID) ([]TvShow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTVShows, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShow
	for rows.Next() {
		var i TvShow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Genre,
			&i.Description,
			&i.Image,
			&i.AppID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTVShowByID = `-- name: GetTVShowByID :one
SELECT id, title, genre, description, image, app_id, created_at, updated_at FROM tv_shows WHERE id = $1
`

func (q *Queries) GetTVShowByID(ctx context.Context, id uuid.UUID) (TvShow, error) {
	row := q.db.QueryRowContext(ctx, getTVShowByID, id)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.Description,
		&i.Image,
		&i.AppID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTVShowSchedulesByTVShowID = `-- name: GetTVShowSchedulesByTVShowID :many
SELECT id, tv_show_id, day, time, is_active FROM tv_show_schedules WHERE tv_show_id = $1
`

func (q *Queries) GetTVShowSchedulesByTVShowID(ctx context.Context, tvShowID uuid.UUID) ([]TvShowSchedule, error) {
	rows, err := q.db.QueryContext(ctx, getTVShowSchedulesByTVShowID, tvShowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShowSchedule
	for rows.Next() {
		var i TvShowSchedule
		if err := rows.Scan(
			&i.ID,
			&i.TvShowID,
			&i.Day,
			&i.Time,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTVShow = `-- name: UpdateTVShow :one
UPDATE tv_shows
SET title = $2, genre = $3, description = $4, image = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, genre, description, image, app_id, created_at, updated_at
`

type UpdateTVShowParams struct {
	ID          uuid.UUID
	Title       string
	Genre       sql.NullString
	Description sql.NullString
	Image       sql.NullString
}

func (q *Queries) UpdateTVShow(ctx context.Context, arg UpdateTVShowParams) (TvShow, error) {
	row := q.db.QueryRowContext(ctx, updateTVShow,
		arg.ID,
		arg.Title,
		arg.Genre,
		arg.Description,
		arg.Image,
	)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.Description,
		&i.Image,
		&i.AppID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTVShowSchedule = `-- name: UpdateTVShowSchedule :exec
UPDATE tv_show_schedules
SET time = $3, is_active = $4
WHERE tv_show_id = $1 AND day = $2
`

type UpdateTVShowScheduleParams struct {
	TvShowID uuid.UUID
	Day      DayEnum
	Time     sql.NullTime
	IsActive bool
}

func (q *Queries) UpdateTVShowSchedule(ctx context.Context, arg UpdateTVShowScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateTVShowSchedule,
		arg.TvShowID,
		arg.Day,
		arg.Time,
		arg.IsActive,
	)
	return err
}

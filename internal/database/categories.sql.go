// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getAllCategoriesWithArticles = `-- name: GetAllCategoriesWithArticles :many
SELECT 
    c.id AS category_id,
    c.name AS category_name,
    a.id AS article_id,
    a.title AS article_title,
    a.content AS article_content,
    a.created_at AS article_created_at,
    a.updated_at AS article_updated_at
FROM 
    categories c
LEFT JOIN 
    articles a ON c.id = a.category_id
ORDER BY 
    c.name, a.created_at DESC
`

type GetAllCategoriesWithArticlesRow struct {
	CategoryID       uuid.UUID
	CategoryName     string
	ArticleID        uuid.NullUUID
	ArticleTitle     sql.NullString
	ArticleContent   sql.NullString
	ArticleCreatedAt sql.NullTime
	ArticleUpdatedAt sql.NullTime
}

func (q *Queries) GetAllCategoriesWithArticles(ctx context.Context) ([]GetAllCategoriesWithArticlesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategoriesWithArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCategoriesWithArticlesRow
	for rows.Next() {
		var i GetAllCategoriesWithArticlesRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.ArticleID,
			&i.ArticleTitle,
			&i.ArticleContent,
			&i.ArticleCreatedAt,
			&i.ArticleUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, created_at, updated_at
FROM categories
WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryWithArticles = `-- name: GetCategoryWithArticles :one
SELECT 
    c.id AS category_id,
    c.name AS category_name,
    a.id AS article_id,
    a.title AS article_title,
    a.content AS article_content,
    a.created_at AS article_created_at,
    a.updated_at AS article_updated_at
FROM 
    categories c
LEFT JOIN 
    articles a ON c.id = a.category_id
WHERE 
    c.id = $1  -- Pass the category ID as a parameter
ORDER BY 
    a.created_at DESC
`

type GetCategoryWithArticlesRow struct {
	CategoryID       uuid.UUID
	CategoryName     string
	ArticleID        uuid.NullUUID
	ArticleTitle     sql.NullString
	ArticleContent   sql.NullString
	ArticleCreatedAt sql.NullTime
	ArticleUpdatedAt sql.NullTime
}

func (q *Queries) GetCategoryWithArticles(ctx context.Context, id uuid.UUID) (GetCategoryWithArticlesRow, error) {
	row := q.db.QueryRowContext(ctx, getCategoryWithArticles, id)
	var i GetCategoryWithArticlesRow
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.ArticleID,
		&i.ArticleTitle,
		&i.ArticleContent,
		&i.ArticleCreatedAt,
		&i.ArticleUpdatedAt,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
RETURNING id, name, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.Name, arg.ID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

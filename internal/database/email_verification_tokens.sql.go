// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email_verification_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createEmailVerificationToken = `-- name: CreateEmailVerificationToken :one
INSERT INTO email_verification_tokens (user_id)
VALUES ($1)
RETURNING token, user_id, created_at, updated_at
`

func (q *Queries) CreateEmailVerificationToken(ctx context.Context, userID uuid.UUID) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, createEmailVerificationToken, userID)
	var i EmailVerificationToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEmailVerificationToken = `-- name: DeleteEmailVerificationToken :exec
DELETE FROM email_verification_tokens
WHERE token = $1
`

func (q *Queries) DeleteEmailVerificationToken(ctx context.Context, token uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmailVerificationToken, token)
	return err
}

const deleteEmailVerificationTokensByUserID = `-- name: DeleteEmailVerificationTokensByUserID :exec
DELETE FROM email_verification_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteEmailVerificationTokensByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmailVerificationTokensByUserID, userID)
	return err
}

const getEmailVerificationToken = `-- name: GetEmailVerificationToken :one
SELECT token, user_id, created_at, updated_at
FROM email_verification_tokens
WHERE token = $1
`

func (q *Queries) GetEmailVerificationToken(ctx context.Context, token uuid.UUID) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerificationToken, token)
	var i EmailVerificationToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription subscription
//
// swagger:model subscription
type Subscription struct {

	// plan name
	PlanName string `json:"PlanName,omitempty"`

	// billing cycle
	// Required: true
	BillingCycle *string `json:"billingCycle"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// current period end
	// Required: true
	// Format: date-time
	CurrentPeriodEnd *strfmt.DateTime `json:"currentPeriodEnd"`

	// current period start
	// Required: true
	// Format: date-time
	CurrentPeriodStart *strfmt.DateTime `json:"currentPeriodStart"`

	// id
	// Required: true
	// Format: uuid4
	ID *strfmt.UUID4 `json:"id"`

	// plan ID
	// Required: true
	// Format: uuid4
	PlanID *strfmt.UUID4 `json:"planID"`

	// status
	// Required: true
	Status *string `json:"status"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`

	// user ID
	// Required: true
	// Format: uuid4
	UserID *strfmt.UUID4 `json:"userID"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentPeriodEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentPeriodStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateBillingCycle(formats strfmt.Registry) error {

	if err := validate.Required("billingCycle", "body", m.BillingCycle); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateCurrentPeriodEnd(formats strfmt.Registry) error {

	if err := validate.Required("currentPeriodEnd", "body", m.CurrentPeriodEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("currentPeriodEnd", "body", "date-time", m.CurrentPeriodEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateCurrentPeriodStart(formats strfmt.Registry) error {

	if err := validate.Required("currentPeriodStart", "body", m.CurrentPeriodStart); err != nil {
		return err
	}

	if err := validate.FormatOf("currentPeriodStart", "body", "date-time", m.CurrentPeriodStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validatePlanID(formats strfmt.Registry) error {

	if err := validate.Required("planID", "body", m.PlanID); err != nil {
		return err
	}

	if err := validate.FormatOf("planID", "body", "uuid4", m.PlanID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userID", "body", m.UserID); err != nil {
		return err
	}

	if err := validate.FormatOf("userID", "body", "uuid4", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this subscription based on context it is used
func (m *Subscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

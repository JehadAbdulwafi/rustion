// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Plan plan
//
// swagger:model plan
type Plan struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// features
	// Required: true
	Features *string `json:"features"`

	// id
	// Required: true
	// Format: uuid4
	ID *strfmt.UUID4 `json:"id"`

	// is active
	// Required: true
	IsActive *bool `json:"isActive"`

	// name
	// Required: true
	Name *string `json:"name"`

	// price monthly
	// Required: true
	PriceMonthly *string `json:"priceMonthly"`

	// price yearly
	// Required: true
	PriceYearly *string `json:"priceYearly"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this plan
func (m *Plan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceMonthly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceYearly(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plan) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateFeatures(formats strfmt.Registry) error {

	if err := validate.Required("features", "body", m.Features); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("isActive", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validatePriceMonthly(formats strfmt.Registry) error {

	if err := validate.Required("priceMonthly", "body", m.PriceMonthly); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validatePriceYearly(formats strfmt.Registry) error {

	if err := validate.Required("priceYearly", "body", m.PriceYearly); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this plan based on context it is used
func (m *Plan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Plan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plan) UnmarshalBinary(b []byte) error {
	var res Plan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StreamEvent stream event
//
// swagger:model streamEvent
type StreamEvent struct {

	// Action performed on the stream
	// Example: on_publish
	// Required: true
	Action *string `json:"action"`

	// Application name of the stream
	// Example: live
	// Required: true
	App *string `json:"app"`

	// Optional opaque token
	// Example: mytoken
	Opaque string `json:"opaque,omitempty"`

	// Parameters passed to the stream
	// Example: ?secret=8f7605d657c74d69b6b48f532c469bc9
	// Required: true
	Param *string `json:"param"`

	// Unique identifier for the request
	// Example: 3ab26a09-59b0-42f7-98e3-a281c7d0712b
	// Required: true
	RequestID *string `json:"request_id"`

	// Stream name
	// Example: livestream
	// Required: true
	Stream *string `json:"stream"`

	// Virtual host of the stream
	// Example: __defaultVhost__
	// Required: true
	Vhost *string `json:"vhost"`
}

// Validate validates this stream event
func (m *StreamEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStream(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVhost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamEvent) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateApp(formats strfmt.Registry) error {

	if err := validate.Required("app", "body", m.App); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateParam(formats strfmt.Registry) error {

	if err := validate.Required("param", "body", m.Param); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("request_id", "body", m.RequestID); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateStream(formats strfmt.Registry) error {

	if err := validate.Required("stream", "body", m.Stream); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateVhost(formats strfmt.Registry) error {

	if err := validate.Required("vhost", "body", m.Vhost); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stream event based on context it is used
func (m *StreamEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StreamEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamEvent) UnmarshalBinary(b []byte) error {
	var res StreamEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

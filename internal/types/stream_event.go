// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StreamEvent stream event
//
// swagger:model streamEvent
type StreamEvent struct {

	// Action performed on stream
	// Example: publish
	// Required: true
	Action *string `json:"action"`

	// App of stream
	// Example: app
	// Required: true
	App *string `json:"app"`

	// Client ID of stream
	// Example: 891d37d3-c74f-493e-aea8-af73efd92016
	// Required: true
	ClientID *string `json:"client_id"`

	// IP address of stream
	// Example: 89.207.132.170
	// Required: true
	IP *string `json:"ip"`

	// Param of stream
	// Example: param
	// Required: true
	Param *string `json:"param"`

	// Server ID of stream
	// Example: 891d37d3-c74f-493e-aea8-af73efd92016
	// Required: true
	ServerID *string `json:"server_id"`

	// Stream of stream
	// Example: stream
	// Required: true
	Stream *string `json:"stream"`

	// Stream ID of stream
	// Example: 891d37d3-c74f-493e-aea8-af73efd92016
	// Required: true
	StreamID *string `json:"stream_id"`

	// Stream URL of stream
	// Example: stream_url
	// Required: true
	StreamURL *string `json:"stream_url"`

	// VHost of stream
	// Example: vhost
	// Required: true
	Vhost *string `json:"vhost"`
}

// Validate validates this stream event
func (m *StreamEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStream(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVhost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamEvent) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateApp(formats strfmt.Registry) error {

	if err := validate.Required("app", "body", m.App); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("client_id", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateParam(formats strfmt.Registry) error {

	if err := validate.Required("param", "body", m.Param); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("server_id", "body", m.ServerID); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateStream(formats strfmt.Registry) error {

	if err := validate.Required("stream", "body", m.Stream); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateStreamID(formats strfmt.Registry) error {

	if err := validate.Required("stream_id", "body", m.StreamID); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateStreamURL(formats strfmt.Registry) error {

	if err := validate.Required("stream_url", "body", m.StreamURL); err != nil {
		return err
	}

	return nil
}

func (m *StreamEvent) validateVhost(formats strfmt.Registry) error {

	if err := validate.Required("vhost", "body", m.Vhost); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stream event based on context it is used
func (m *StreamEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StreamEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamEvent) UnmarshalBinary(b []byte) error {
	var res StreamEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAllCategoriesWithNewsResponse get all categories with news response
//
// swagger:model getAllCategoriesWithNewsResponse
type GetAllCategoriesWithNewsResponse []*GetAllCategoriesWithNewsResponseItems0

// Validate validates this get all categories with news response
func (m GetAllCategoriesWithNewsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this get all categories with news response based on the context it is used
func (m GetAllCategoriesWithNewsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {

			if swag.IsZero(m[i]) { // not required
				return nil
			}

			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// GetAllCategoriesWithNewsResponseItems0 get all categories with news response items0
//
// swagger:model GetAllCategoriesWithNewsResponseItems0
type GetAllCategoriesWithNewsResponseItems0 struct {

	// category id
	// Example: 1
	CategoryID int64 `json:"category_id,omitempty"`

	// category name
	// Example: Politics
	CategoryName string `json:"category_name,omitempty"`

	// news content
	// Example: This is the content of the news article.
	NewsContent string `json:"news_content,omitempty"`

	// news created at
	// Example: 2023-10-01T12:00:00Z
	// Format: date-time
	NewsCreatedAt strfmt.DateTime `json:"news_created_at,omitempty"`

	// news id
	// Example: 1
	NewsID int64 `json:"news_id,omitempty"`

	// news title
	// Example: Breaking News Title
	NewsTitle string `json:"news_title,omitempty"`

	// news updated at
	// Example: 2023-10-02T12:00:00Z
	// Format: date-time
	NewsUpdatedAt strfmt.DateTime `json:"news_updated_at,omitempty"`
}

// Validate validates this get all categories with news response items0
func (m *GetAllCategoriesWithNewsResponseItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewsCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewsUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAllCategoriesWithNewsResponseItems0) validateNewsCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.NewsCreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("news_created_at", "body", "date-time", m.NewsCreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetAllCategoriesWithNewsResponseItems0) validateNewsUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.NewsUpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("news_updated_at", "body", "date-time", m.NewsUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all categories with news response items0 based on context it is used
func (m *GetAllCategoriesWithNewsResponseItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetAllCategoriesWithNewsResponseItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAllCategoriesWithNewsResponseItems0) UnmarshalBinary(b []byte) error {
	var res GetAllCategoriesWithNewsResponseItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

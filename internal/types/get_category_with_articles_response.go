// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCategoryWithArticlesResponse get category with articles response
//
// swagger:model getCategoryWithArticlesResponse
type GetCategoryWithArticlesResponse struct {

	// articles
	Articles []*GetCategoryWithArticlesResponseArticlesItems0 `json:"articles"`

	// category
	Category *Category `json:"category,omitempty"`
}

// Validate validates this get category with articles response
func (m *GetCategoryWithArticlesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArticles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCategoryWithArticlesResponse) validateArticles(formats strfmt.Registry) error {
	if swag.IsZero(m.Articles) { // not required
		return nil
	}

	for i := 0; i < len(m.Articles); i++ {
		if swag.IsZero(m.Articles[i]) { // not required
			continue
		}

		if m.Articles[i] != nil {
			if err := m.Articles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("articles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("articles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetCategoryWithArticlesResponse) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get category with articles response based on the context it is used
func (m *GetCategoryWithArticlesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArticles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCategoryWithArticlesResponse) contextValidateArticles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Articles); i++ {

		if m.Articles[i] != nil {

			if swag.IsZero(m.Articles[i]) { // not required
				return nil
			}

			if err := m.Articles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("articles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("articles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetCategoryWithArticlesResponse) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCategoryWithArticlesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCategoryWithArticlesResponse) UnmarshalBinary(b []byte) error {
	var res GetCategoryWithArticlesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetCategoryWithArticlesResponseArticlesItems0 get category with articles response articles items0
//
// swagger:model GetCategoryWithArticlesResponseArticlesItems0
type GetCategoryWithArticlesResponseArticlesItems0 struct {

	// ID of article
	// Example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
	// Required: true
	// Format: uuid4
	CategoryID *strfmt.UUID4 `json:"category_id"`

	// Content of the article
	// Example: This is the content of the article.
	// Required: true
	Content *string `json:"content"`

	// Timestamp when the article was created
	// Example: 2023-10-01T12:00:00Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// ID of article
	// Example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
	// Required: true
	// Format: uuid4
	ID *strfmt.UUID4 `json:"id"`

	// Title of the article
	// Example: Article Title
	// Required: true
	// Max Length: 255
	Title *string `json:"title"`

	// Timestamp when the article was last updated
	// Example: 2023-10-02T12:00:00Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this get category with articles response articles items0
func (m *GetCategoryWithArticlesResponseArticlesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCategoryWithArticlesResponseArticlesItems0) validateCategoryID(formats strfmt.Registry) error {

	if err := validate.Required("category_id", "body", m.CategoryID); err != nil {
		return err
	}

	if err := validate.FormatOf("category_id", "body", "uuid4", m.CategoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithArticlesResponseArticlesItems0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithArticlesResponseArticlesItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithArticlesResponseArticlesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithArticlesResponseArticlesItems0) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 255); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithArticlesResponseArticlesItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get category with articles response articles items0 based on context it is used
func (m *GetCategoryWithArticlesResponseArticlesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetCategoryWithArticlesResponseArticlesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCategoryWithArticlesResponseArticlesItems0) UnmarshalBinary(b []byte) error {
	var res GetCategoryWithArticlesResponseArticlesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

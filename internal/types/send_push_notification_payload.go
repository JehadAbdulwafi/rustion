// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SendPushNotificationPayload send push notification payload
//
// swagger:model sendPushNotificationPayload
type SendPushNotificationPayload struct {

	// Body of the notification
	// Example: This is the body of the notification.
	// Required: true
	Body *string `json:"body"`

	// Image of the notification
	// Example: https://example.com/picture.jpg
	Image string `json:"image,omitempty"`

	// Title of the notification
	// Example: Notification subject
	// Required: true
	// Max Length: 255
	Subject *string `json:"subject"`
}

// Validate validates this send push notification payload
func (m *SendPushNotificationPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendPushNotificationPayload) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *SendPushNotificationPayload) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	if err := validate.MaxLength("subject", "body", *m.Subject, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this send push notification payload based on context it is used
func (m *SendPushNotificationPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SendPushNotificationPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendPushNotificationPayload) UnmarshalBinary(b []byte) error {
	var res SendPushNotificationPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

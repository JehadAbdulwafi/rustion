// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageUploadResponse image upload response
//
// swagger:model imageUploadResponse
type ImageUploadResponse struct {

	// The unique filename of the uploaded image
	// Example: 550e8400-e29b-41d4-a716-446655440000.jpg
	// Required: true
	Filename *string `json:"filename"`

	// The URL path where the uploaded image can be accessed
	// Example: /assets/images/550e8400-e29b-41d4-a716-446655440000.jpg
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this image upload response
func (m *ImageUploadResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageUploadResponse) validateFilename(formats strfmt.Registry) error {

	if err := validate.Required("filename", "body", m.Filename); err != nil {
		return err
	}

	return nil
}

func (m *ImageUploadResponse) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image upload response based on context it is used
func (m *ImageUploadResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageUploadResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageUploadResponse) UnmarshalBinary(b []byte) error {
	var res ImageUploadResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

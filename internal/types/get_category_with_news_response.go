// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCategoryWithNewsResponse get category with news response
//
// swagger:model getCategoryWithNewsResponse
type GetCategoryWithNewsResponse struct {

	// category id
	// Example: 1
	CategoryID int64 `json:"category_id,omitempty"`

	// category name
	// Example: Politics
	CategoryName string `json:"category_name,omitempty"`

	// news
	News []*GetCategoryWithNewsResponseNewsItems0 `json:"news"`
}

// Validate validates this get category with news response
func (m *GetCategoryWithNewsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNews(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCategoryWithNewsResponse) validateNews(formats strfmt.Registry) error {
	if swag.IsZero(m.News) { // not required
		return nil
	}

	for i := 0; i < len(m.News); i++ {
		if swag.IsZero(m.News[i]) { // not required
			continue
		}

		if m.News[i] != nil {
			if err := m.News[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("news" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("news" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get category with news response based on the context it is used
func (m *GetCategoryWithNewsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCategoryWithNewsResponse) contextValidateNews(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.News); i++ {

		if m.News[i] != nil {

			if swag.IsZero(m.News[i]) { // not required
				return nil
			}

			if err := m.News[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("news" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("news" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCategoryWithNewsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCategoryWithNewsResponse) UnmarshalBinary(b []byte) error {
	var res GetCategoryWithNewsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetCategoryWithNewsResponseNewsItems0 get category with news response news items0
//
// swagger:model GetCategoryWithNewsResponseNewsItems0
type GetCategoryWithNewsResponseNewsItems0 struct {

	// ID of the category the news article belongs to
	// Example: 2
	// Required: true
	CategoryID *int64 `json:"category_id"`

	// Content of the news article
	// Example: This is the content of the news article.
	// Required: true
	Content *string `json:"content"`

	// Timestamp when the article was created
	// Example: 2023-10-01T12:00:00Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// ID of the news article
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Title of the news article
	// Example: Breaking News Title
	// Required: true
	// Max Length: 255
	Title *string `json:"title"`

	// Timestamp when the article was last updated
	// Example: 2023-10-02T12:00:00Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this get category with news response news items0
func (m *GetCategoryWithNewsResponseNewsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCategoryWithNewsResponseNewsItems0) validateCategoryID(formats strfmt.Registry) error {

	if err := validate.Required("category_id", "body", m.CategoryID); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithNewsResponseNewsItems0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithNewsResponseNewsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithNewsResponseNewsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithNewsResponseNewsItems0) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 255); err != nil {
		return err
	}

	return nil
}

func (m *GetCategoryWithNewsResponseNewsItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get category with news response news items0 based on context it is used
func (m *GetCategoryWithNewsResponseNewsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetCategoryWithNewsResponseNewsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCategoryWithNewsResponseNewsItems0) UnmarshalBinary(b []byte) error {
	var res GetCategoryWithNewsResponseNewsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

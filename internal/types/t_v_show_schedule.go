// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TVShowSchedule t v show schedule
//
// swagger:model tVShowSchedule
type TVShowSchedule struct {

	// Day of the week for the schedule
	// Example: Monday
	// Required: true
	Day *string `json:"day"`

	// ID of the schedule
	// Example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
	// Required: true
	// Format: uuid4
	ID *strfmt.UUID4 `json:"id"`

	// Indicates if the show is active on this day
	// Example: true
	// Required: true
	IsActive *bool `json:"is_active"`

	// Time of the schedule
	// Example: 2023-10-01T14:00:00Z
	// Required: true
	Time *string `json:"time"`

	// ID of the associated TV show
	// Example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
	// Required: true
	// Format: uuid4
	TvShowID *strfmt.UUID4 `json:"tv_show_id"`
}

// Validate validates this t v show schedule
func (m *TVShowSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTvShowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TVShowSchedule) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	return nil
}

func (m *TVShowSchedule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TVShowSchedule) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *TVShowSchedule) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

func (m *TVShowSchedule) validateTvShowID(formats strfmt.Registry) error {

	if err := validate.Required("tv_show_id", "body", m.TvShowID); err != nil {
		return err
	}

	if err := validate.FormatOf("tv_show_id", "body", "uuid4", m.TvShowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this t v show schedule based on context it is used
func (m *TVShowSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TVShowSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TVShowSchedule) UnmarshalBinary(b []byte) error {
	var res TVShowSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

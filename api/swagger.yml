# // Code generated by "make swagger"; DO NOT EDIT.
consumes:
    - application/json
produces:
    - application/json
swagger: "2.0"
info:
    description: API documentation
    title: github.com/JehadAbdulwafi/rustion
    version: 0.1.0
paths:
    /api/v1/auth/login:
        post:
            description: Returns an access and refresh token on successful authentication
            operationId: PostLoginRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postLoginPayload'
            responses:
                "200":
                    description: PostLoginResponse
                    schema:
                        $ref: '#/definitions/postLoginResponse'
                "400":
                    description: PublicHTTPValidationError
                    schema:
                        $ref: '#/definitions/publicHttpValidationError'
                "401":
                    description: PublicHTTPError
                    schema:
                        $ref: '#/definitions/publicHttpError'
                "403":
                    description: PublicHTTPError, type `USER_DEACTIVATED`
                    schema:
                        $ref: '#/definitions/publicHttpError'
            summary: Login with local user
            tags:
                - auth
    /api/v1/auth/register:
        post:
            description: Returns an access and refresh token on successful registration
            operationId: PostRegisterRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postRegisterPayload'
            responses:
                "200":
                    description: PostLoginResponse
                    schema:
                        $ref: '#/definitions/postLoginResponse'
                "400":
                    description: PublicHTTPValidationError, type `INVALID_PASSWORD`
                    schema:
                        $ref: '#/definitions/publicHttpValidationError'
                "409":
                    description: PublicHTTPError, type `USER_ALREADY_EXISTS`
                    schema:
                        $ref: '#/definitions/publicHttpError'
            summary: Registers a local user
            tags:
                - auth
    /api/v1/auth/userinfo:
        get:
            description: |-
                Returns user information compatible with the OpenID Connect Core 1.0 specification.
                Information returned depends on the requesting user as some data is only available if an app user profile exists.
            operationId: GetUserInfoRoute
            responses:
                "200":
                    description: GetUserInfoResponse
                    schema:
                        $ref: '#/definitions/getUserInfoResponse'
            security:
                - Bearer: []
            summary: Get user info
            tags:
                - auth
    /api/v1/featured_sections:
        get:
            description: Retrieves all featured sections with their associated articles
            operationId: GetAllFeaturedSectionsWithArticles
            responses:
                "200":
                    description: List of featured sections with articles
                    schema:
                        $ref: '#/definitions/getAllFeaturedSectionsWithArticlesResponse'
            summary: Gets all featured sections with articles
            tags:
                - featured_sections
    /api/v1/featured_sections/{id}:
        delete:
            description: Deletes a featured section by ID
            operationId: DeleteFeaturedSection
            parameters:
                - description: ID of the featured section
                  in: path
                  name: id
                  required: true
                  type: integer
            responses:
                "200":
                    description: DeleteFeaturedSectionResponse
                    schema:
                        $ref: '#/definitions/deleteFeaturedSectionResponse'
            summary: Deletes a featured section
            tags:
                - featured_sections
    /api/v1/featured_sections/{id}/articles:
        get:
            description: Retrieves a featured section with its associated articles
            operationId: GetFeaturedSectionWithArticles
            parameters:
                - description: ID of the featured section
                  in: path
                  name: id
                  required: true
                  type: integer
            responses:
                "200":
                    description: GetFeaturedSectionWithArticlesResponse
                    schema:
                        $ref: '#/definitions/getFeaturedSectionWithArticlesResponse'
            summary: Gets a featured section with articles
            tags:
                - featured_sections
    /api/v1/news:
        get:
            description: Retrieves all news articles
            operationId: GetAllNewsArticles
            responses:
                "200":
                    description: List of news articles
                    schema:
                        items:
                            $ref: '#/definitions/newsArticle'
                        type: array
            summary: Gets all news articles
            tags:
                - news
    /api/v1/news/categories:
        get:
            description: Retrieves all categories with their associated news articles
            operationId: GetAllCategoriesWithNews
            responses:
                "200":
                    description: List of categories with news
                    schema:
                        $ref: '#/definitions/getAllCategoriesWithNewsResponse'
            summary: Gets all categories with news
            tags:
                - news_categories
    /api/v1/news/categories/{id}:
        delete:
            description: Deletes a news category by ID
            operationId: DeleteNewsCategory
            parameters:
                - description: ID of the news category
                  in: path
                  name: id
                  required: true
                  type: integer
            responses:
                "200":
                    description: DeleteNewsCategoryResponse
                    schema:
                        $ref: '#/definitions/deleteNewsCategoryResponse'
            summary: Deletes a news category
            tags:
                - news_categories
    /api/v1/news/categories/{id}/news:
        get:
            description: Retrieves a category with its associated news articles
            operationId: GetCategoryWithNews
            parameters:
                - description: ID of the news category
                  in: path
                  name: id
                  required: true
                  type: integer
            responses:
                "200":
                    description: GetCategoryWithNewsResponse
                    schema:
                        $ref: '#/definitions/getCategoryWithNewsResponse'
            summary: Gets a category with news
            tags:
                - news_categories
    /api/v1/news/{id}:
        delete:
            description: Deletes a news article by ID
            operationId: DeleteNewsArticle
            parameters:
                - description: ID of the news article
                  in: path
                  name: id
                  required: true
                  type: integer
            responses:
                "200":
                    description: DeleteNewsArticleResponse
                    schema:
                        $ref: '#/definitions/deleteNewsArticleResponse'
            summary: Deletes a news article
            tags:
                - news
    /api/v1/stream:
        post:
            description: Creates a stream
            operationId: PostCreateStreamRoute
            responses:
                "200":
                    description: PostCreateStreamResponse
                    schema:
                        $ref: '#/definitions/createStreamResponse'
            summary: Creates a stream
            tags:
                - stream
    /api/v1/stream/play:
        post:
            description: Plays a stream
            operationId: PostPlayRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/streamEvent'
            responses:
                "200":
                    description: PostPublishResponse
                    schema:
                        $ref: '#/definitions/streamEventResponse'
            summary: Plays a stream
            tags:
                - stream
    /api/v1/stream/publish:
        post:
            description: Publishes a stream
            operationId: PostPublishRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/streamEvent'
            responses:
                "200":
                    description: PostPublishResponse
                    schema:
                        $ref: '#/definitions/streamEventResponse'
            summary: Publishes a stream
            tags:
                - stream
    /api/v1/stream/stop:
        post:
            description: Stops a stream
            operationId: PostStopRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/streamEvent'
            responses:
                "200":
                    description: PostPublishResponse
                    schema:
                        $ref: '#/definitions/streamEventResponse'
            summary: Stops a stream
            tags:
                - stream
    /api/v1/stream/unpublish:
        post:
            description: Unpublishes a stream
            operationId: PostUnpublishRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/streamEvent'
            responses:
                "200":
                    description: PostUnpublishResponse
                    schema:
                        $ref: '#/definitions/streamEventResponse'
            summary: Unpublishes a stream
            tags:
                - stream
definitions:
    createStreamResponse:
        properties:
            id:
                description: ID of stream
                example: 891d37d3-c74f-493e-aea8-af73efd92016
                format: uuid4
                type: string
            url:
                description: URL of stream
                example: url
                type: string
        required:
            - id
        type: object
    deleteFeaturedSectionResponse:
        properties:
            message:
                example: Section deleted successfully.
                type: string
        type: object
    deleteNewsArticleResponse:
        properties:
            message:
                example: Article deleted successfully.
                type: string
        type: object
    deleteNewsCategoryResponse:
        properties:
            message:
                example: Category deleted successfully.
                type: string
        type: object
    featuredArticle:
        properties:
            created_at:
                description: Timestamp when the article was created
                example: "2023-10-01T12:00:00Z"
                format: date-time
                type: string
            featured_section_id:
                description: ID of the featured section
                example: !!float 1
                type: integer
            id:
                description: ID of the featured article
                example: !!float 1
                type: integer
            news_id:
                description: ID of the news article
                example: !!float 1
                type: integer
            updated_at:
                description: Timestamp when the article was last updated
                example: "2023-10-02T12:00:00Z"
                format: date-time
                type: string
        required:
            - id
            - featured_section_id
            - news_id
            - created_at
            - updated_at
        type: object
    getAllCategoriesWithNewsResponse:
        items:
            properties:
                category_id:
                    example: !!float 1
                    type: integer
                category_name:
                    example: Politics
                    type: string
                news_content:
                    example: This is the content of the news article.
                    type: string
                news_created_at:
                    example: "2023-10-01T12:00:00Z"
                    format: date-time
                    type: string
                news_id:
                    example: !!float 1
                    type: integer
                news_title:
                    example: Breaking News Title
                    type: string
                news_updated_at:
                    example: "2023-10-02T12:00:00Z"
                    format: date-time
                    type: string
            type: object
        type: array
    getAllFeaturedSectionsWithArticlesResponse:
        items:
            properties:
                featured_article_created_at:
                    example: "2023-10-01T12:00:00Z"
                    format: date-time
                    type: string
                featured_article_id:
                    example: !!float 1
                    type: integer
                featured_article_updated_at:
                    example: "2023-10-02T12:00:00Z"
                    format: date-time
                    type: string
                news_content:
                    example: This is the content of the news article.
                    type: string
                news_id:
                    example: !!float 1
                    type: integer
                news_title:
                    example: Breaking News Title
                    type: string
                section_id:
                    example: !!float 1
                    type: integer
                section_title:
                    example: Top Stories
                    type: string
            type: object
        type: array
    getCategoryWithNewsResponse:
        properties:
            category_id:
                example: !!float 1
                type: integer
            category_name:
                example: Politics
                type: string
            news:
                items:
                    properties:
                        category_id:
                            description: ID of the category the news article belongs to
                            example: !!float 2
                            type: integer
                        content:
                            description: Content of the news article
                            example: This is the content of the news article.
                            type: string
                        created_at:
                            description: Timestamp when the article was created
                            example: "2023-10-01T12:00:00Z"
                            format: date-time
                            type: string
                        id:
                            description: ID of the news article
                            example: !!float 1
                            type: integer
                        title:
                            description: Title of the news article
                            example: Breaking News Title
                            maxLength: !!float 255
                            type: string
                        updated_at:
                            description: Timestamp when the article was last updated
                            example: "2023-10-02T12:00:00Z"
                            format: date-time
                            type: string
                    required:
                        - id
                        - title
                        - content
                        - category_id
                        - created_at
                        - updated_at
                    type: object
                type: array
        type: object
    getFeaturedSectionWithArticlesResponse:
        properties:
            articles:
                items:
                    $ref: '#/definitions/featuredArticle'
                type: array
            section_id:
                example: !!float 1
                type: integer
            section_title:
                example: Top Stories
                type: string
        type: object
    getUserInfoResponse:
        properties:
            email:
                description: Email address of user, if available
                example: user@example.com
                format: email
                maxLength: !!float 255
                type: string
            id:
                description: ID of user
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                type: string
            name:
                description: Name of user
                example: John Doe
                type: string
        required:
            - id
            - name
            - email
        type: object
    httpValidationErrorDetail:
        properties:
            error:
                description: Error describing field validation failure
                type: string
            in:
                description: Indicates how the invalid field was provided
                type: string
            key:
                description: Key of field failing validation
                type: string
        required:
            - key
            - in
            - error
        type: object
    newsArticle:
        properties:
            category_id:
                description: ID of the category the news article belongs to
                example: !!float 2
                type: integer
            content:
                description: Content of the news article
                example: This is the content of the news article.
                type: string
            created_at:
                description: Timestamp when the article was created
                example: "2023-10-01T12:00:00Z"
                format: date-time
                type: string
            id:
                description: ID of the news article
                example: !!float 1
                type: integer
            title:
                description: Title of the news article
                example: Breaking News Title
                maxLength: !!float 255
                type: string
            updated_at:
                description: Timestamp when the article was last updated
                example: "2023-10-02T12:00:00Z"
                format: date-time
                type: string
        required:
            - id
            - title
            - content
            - category_id
            - created_at
            - updated_at
        type: object
    orderDir:
        enum:
            - asc
            - desc
        type: string
    postLoginPayload:
        properties:
            email:
                description: Email of user to authenticate as
                example: user@example.com
                format: email
                maxLength: !!float 255
                minLength: !!float 1
                type: string
            password:
                description: Password of user to authenticate as
                example: correct horse battery staple
                maxLength: !!float 255
                minLength: !!float 1
                type: string
        required:
            - email
            - password
        type: object
    postLoginResponse:
        properties:
            access_token:
                description: Access token required for accessing protected API endpoints
                example: eyJhdWQiOiJjdXN0b2...
                type: string
            refresh_token:
                description: Refresh token for refreshing the access token once it expires
                example: eyJhdWQiOiJjdXN0b2...
                type: string
        required:
            - access_token
            - refresh_token
        type: object
    postRegisterPayload:
        properties:
            email:
                description: Email to register with
                example: user@example.com
                format: email
                maxLength: !!float 255
                minLength: !!float 1
                type: string
            name:
                description: Name to register with
                example: John Doe
                maxLength: !!float 255
                minLength: !!float 1
                type: string
            password:
                description: Password to register with
                example: correct horse battery staple
                maxLength: !!float 255
                minLength: !!float 1
                type: string
        required:
            - name
            - email
            - password
        type: object
    publicHttpError:
        properties:
            detail:
                description: More detailed, human-readable, optional explanation of the error
                example: User is lacking permission to access this resource
                type: string
            status:
                description: HTTP status code returned for the error
                example: !!float 403
                format: int64
                maximum: !!float 599
                minimum: !!float 100
                type: integer
                x-go-name: Code
            title:
                description: Short, human-readable description of the error
                example: Forbidden
                type: string
            type:
                description: Type of error returned, should be used for client-side error handling
                example: generic
                type: string
        required:
            - status
            - type
            - title
        type: object
    publicHttpValidationError:
        allOf:
            - $ref: '#/definitions/publicHttpError'
        properties:
            validationErrors:
                description: List of errors received while validating payload against schema
                items:
                    $ref: '#/definitions/httpValidationErrorDetail'
                type: array
        required:
            - validationErrors
        type: object
    streamEvent:
        properties:
            action:
                description: Action performed on stream
                example: publish
                type: string
            app:
                description: App of stream
                example: app
                type: string
            client_id:
                description: Client ID of stream
                example: 891d37d3-c74f-493e-aea8-af73efd92016
                type: string
            ip:
                description: IP address of stream
                example: 89.207.132.170
                type: string
            param:
                description: Param of stream
                example: param
                type: string
            server_id:
                description: Server ID of stream
                example: 891d37d3-c74f-493e-aea8-af73efd92016
                type: string
            stream:
                description: Stream of stream
                example: stream
                type: string
            stream_id:
                description: Stream ID of stream
                example: 891d37d3-c74f-493e-aea8-af73efd92016
                type: string
            stream_url:
                description: Stream URL of stream
                example: stream_url
                type: string
            vhost:
                description: VHost of stream
                example: vhost
                type: string
        required:
            - action
            - client_id
            - ip
            - vhost
            - app
            - stream
            - param
            - server_id
            - stream_id
            - stream_url
        type: object
    streamEventResponse:
        properties:
            code:
                description: Response code
                example: !!float 0
                type: integer
        required:
            - code
        type: object
responses:
    AuthForbiddenResponse:
        description: PublicHTTPError, type `USER_DEACTIVATED`/`NOT_LOCAL_USER`
        schema:
            $ref: '#/definitions/publicHttpError'
    AuthUnauthorizedResponse:
        description: PublicHTTPError
        schema:
            $ref: '#/definitions/publicHttpError'
    InvalidPasswordResponse:
        description: PublicHTTPValidationError, type `INVALID_PASSWORD`
        schema:
            $ref: '#/definitions/publicHttpValidationError'
    ValidationError:
        description: PublicHTTPValidationError
        schema:
            $ref: '#/definitions/publicHttpValidationError'
securityDefinitions:
    Bearer:
        description: |-
            Access token for application access, **must** include "Bearer " prefix.
            Example: `Bearer b4a94a42-3ea2-4af3-9699-8bcbfee6e6d2`
        in: header
        name: Authorization
        type: apiKey
        x-keyPrefix: 'Bearer '

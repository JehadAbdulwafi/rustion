# // Code generated by "make swagger"; DO NOT EDIT.
consumes:
    - application/json
produces:
    - application/json
swagger: "2.0"
info:
    description: API documentation
    title: github.com/JehadAbdulwafi/rustion
    version: 0.1.0
paths:
    /api/v1/apps:
        get:
            description: Return a list of App
            operationId: GetAppListRoute
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/appList'
            security:
                - Bearer: []
            summary: Return a list of App
            tags:
                - App
        post:
            description: Update the given App
            operationId: PostAppRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/appPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/app'
            security:
                - Bearer: []
            summary: Update the given App
            tags:
                - App
    /api/v1/apps/{id}:
        delete:
            description: Delete App with ID
            operationId: DeleteAppRoute
            parameters:
                - description: ID of App
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "204":
                    description: Success
            security:
                - Bearer: []
            summary: Delete App with ID
            tags:
                - App
        get:
            description: Return App with ID
            operationId: GetAppRoute
            parameters:
                - description: ID of App
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/app'
            security:
                - Bearer: []
            summary: Return App with ID
            tags:
                - App
        put:
            description: Update the given App
            operationId: PutAppRoute
            parameters:
                - description: ID of App
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/appConfigPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/messageResponse'
            security:
                - Bearer: []
            summary: Update the given App
            tags:
                - App
    /api/v1/articles:
        get:
            description: Retrieves all articles
            operationId: GetAllArticles
            responses:
                "200":
                    description: List of articles
                    schema:
                        $ref: '#/definitions/getArticlesResponse'
            summary: Gets all articles
            tags:
                - articles
        post:
            description: Creates a article
            operationId: PostCreateArticle
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/createArticleRequest'
            responses:
                "200":
                    description: CreateArticleResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Creates a article
            tags:
                - articles
    /api/v1/articles/{id}:
        delete:
            description: Deletes a article by ID
            operationId: DeleteArticle
            parameters:
                - description: ID of the article
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: DeleteArticleResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Deletes a article
            tags:
                - articles
        get:
            description: Retrieves a article by ID
            operationId: GetArticle
            parameters:
                - description: ID of the article
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: GetArticleResponse
                    schema:
                        $ref: '#/definitions/getArticleResponse'
            summary: Gets a article
            tags:
                - articles
        put:
            description: Updates a article by ID
            operationId: UpdateArticle
            parameters:
                - description: ID of the article
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/updateArticleRequest'
            responses:
                "200":
                    description: UpdateArticleResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Updates a article
            tags:
                - articles
    /api/v1/auth/change-password:
        post:
            description: |-
                After successful password change, all current access and refresh tokens are
                invalidated and a new set of auth tokens is returned
            operationId: PostChangePasswordRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postChangePasswordPayload'
            responses:
                "200":
                    description: PostLoginResponse
                    schema:
                        $ref: '#/definitions/postLoginResponse'
                "400":
                    description: PublicHTTPValidationError, type `INVALID_PASSWORD`
                    schema:
                        $ref: '#/definitions/publicHttpValidationError'
                "401":
                    description: PublicHTTPError
                    schema:
                        $ref: '#/definitions/publicHttpError'
                "403":
                    description: PublicHTTPError, type `USER_DEACTIVATED`/`NOT_LOCAL_USER`
                    schema:
                        $ref: '#/definitions/publicHttpError'
            security:
                - Bearer: []
            summary: Change local user's password
            tags:
                - auth
    /api/v1/auth/forgot-password:
        post:
            description: |-
                Initiates a password reset for a local user, sending an email with a password
                reset link to the provided email address if a user account exists. Will always
                succeed, even if no user was found in order to prevent user enumeration
            operationId: PostForgotPasswordRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postForgotPasswordPayload'
            responses:
                "204":
                    description: Success
                "400":
                    description: PublicHTTPValidationError
                    schema:
                        $ref: '#/definitions/publicHttpValidationError'
            summary: Initiate password reset for local user
            tags:
                - auth
    /api/v1/auth/forgot-password/complete:
        post:
            description: |-
                Completes a password reset for a local user, using the password reset token sent via email
                to confirm user access, setting the new password if successful. All current access and refresh
                tokens are invalidated and a new set of auth tokens is returned
            operationId: PostForgotPasswordCompleteRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postForgotPasswordCompletePayload'
            responses:
                "200":
                    description: PostLoginResponse
                    schema:
                        $ref: '#/definitions/postLoginResponse'
                "400":
                    description: PublicHTTPValidationError, type `INVALID_PASSWORD`
                    schema:
                        $ref: '#/definitions/publicHttpValidationError'
                "403":
                    description: PublicHTTPError, type `USER_DEACTIVATED`/`NOT_LOCAL_USER`
                    schema:
                        $ref: '#/definitions/publicHttpError'
                "404":
                    description: PublicHTTPError, type `TOKEN_NOT_FOUND`
                    schema:
                        $ref: '#/definitions/publicHttpError'
                "409":
                    description: PublicHTTPError, type `TOKEN_EXPIRED`
                    schema:
                        $ref: '#/definitions/publicHttpError'
            summary: Completes password reset for local user
            tags:
                - auth
    /api/v1/auth/login:
        post:
            description: Returns an access and refresh token on successful authentication
            operationId: PostLoginRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postLoginPayload'
            responses:
                "200":
                    description: PostLoginResponse
                    schema:
                        $ref: '#/definitions/postLoginResponse'
                "400":
                    description: PublicHTTPValidationError
                    schema:
                        $ref: '#/definitions/publicHttpValidationError'
                "401":
                    description: PublicHTTPError
                    schema:
                        $ref: '#/definitions/publicHttpError'
                "403":
                    description: PublicHTTPError, type `USER_DEACTIVATED`
                    schema:
                        $ref: '#/definitions/publicHttpError'
            summary: Login with local user
            tags:
                - auth
    /api/v1/auth/refresh:
        post:
            description: Returns a new access token on successful refresh
            operationId: PostRefreshRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postRefreshPayload'
            responses:
                "200":
                    description: PostLoginResponse
                    schema:
                        $ref: '#/definitions/postLoginResponse'
                "401":
                    description: PublicHTTPError
                    schema:
                        $ref: '#/definitions/publicHttpError'
            security:
                - Bearer: []
            summary: Refresh access token
            tags:
                - auth
    /api/v1/auth/register:
        post:
            description: Returns an access and refresh token on successful registration
            operationId: PostRegisterRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postRegisterPayload'
            responses:
                "200":
                    description: PostLoginResponse
                    schema:
                        $ref: '#/definitions/postLoginResponse'
                "400":
                    description: PublicHTTPValidationError, type `INVALID_PASSWORD`
                    schema:
                        $ref: '#/definitions/publicHttpValidationError'
                "409":
                    description: PublicHTTPError, type `USER_ALREADY_EXISTS`
                    schema:
                        $ref: '#/definitions/publicHttpError'
            summary: Registers a local user
            tags:
                - auth
    /api/v1/auth/userinfo:
        get:
            description: |-
                Returns user information compatible with the OpenID Connect Core 1.0 specification.
                Information returned depends on the requesting user as some data is only available if an app user profile exists.
            operationId: GetUserInfoRoute
            responses:
                "200":
                    description: GetUserInfoResponse
                    schema:
                        $ref: '#/definitions/getUserInfoResponse'
            security:
                - Bearer: []
            summary: Get user info
            tags:
                - auth
        put:
            description: |-
                Updates user information compatible with the OpenID Connect Core 1.0 specification.
                Information returned depends on the requesting user as some data is only available if an app user profile exists.
            operationId: PutUserInfoRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/putUserInfoPayload'
            responses:
                "204":
                    description: Success
                "400":
                    description: PublicHTTPValidationError
                    schema:
                        $ref: '#/definitions/publicHttpValidationError'
            security:
                - Bearer: []
            summary: Update user info
            tags:
                - auth
    /api/v1/channels:
        get:
            description: Return a list of Channel
            operationId: GetChannelListRoute
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/channelList'
            security:
                - Bearer: []
            summary: Return a list of Channel
            tags:
                - Channel
        post:
            description: Update the given Channel
            operationId: PostChannelRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/channelPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/channel'
            security:
                - Bearer: []
            summary: Update the given Channel
            tags:
                - Channel
    /api/v1/channels/{id}:
        delete:
            description: Delete Channel with ID
            operationId: DeleteChannelRoute
            parameters:
                - description: ID of Channel
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "204":
                    description: Success
            security:
                - Bearer: []
            summary: Delete Channel with ID
            tags:
                - Channel
        get:
            description: Return Channel with ID
            operationId: GetChannelRoute
            parameters:
                - description: ID of Channel
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/channel'
            security:
                - Bearer: []
            summary: Return Channel with ID
            tags:
                - Channel
        put:
            description: Update the given Channel
            operationId: PutChannelRoute
            parameters:
                - description: ID of Channel
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/channelPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/channel'
            security:
                - Bearer: []
            summary: Update the given Channel
            tags:
                - Channel
    /api/v1/faqs:
        get:
            description: Return a list of Faq
            operationId: GetFaqListRoute
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/faqList'
            security:
                - Bearer: []
            summary: Return a list of Faq
            tags:
                - Faq
        post:
            description: Update the given Faq
            operationId: PostFaqRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/faqPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/faq'
            security:
                - Bearer: []
            summary: Update the given Faq
            tags:
                - Faq
    /api/v1/faqs/{id}:
        delete:
            description: Delete Faq with ID
            operationId: DeleteFaqRoute
            parameters:
                - description: ID of Faq
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "204":
                    description: Success
                    schema:
                        $ref: '#/definitions/messageResponse'
            security:
                - Bearer: []
            summary: Delete Faq with ID
            tags:
                - Faq
        get:
            description: Return Faq with ID
            operationId: GetFaqRoute
            parameters:
                - description: ID of Faq
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/faq'
            security:
                - Bearer: []
            summary: Return Faq with ID
            tags:
                - Faq
        put:
            description: Update the given Faq
            operationId: PutFaqRoute
            parameters:
                - description: ID of Faq
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/faqPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/messageResponse'
            security:
                - Bearer: []
            summary: Update the given Faq
            tags:
                - Faq
    /api/v1/featured-sections:
        get:
            description: Retrieves all featured sections with their associated articles
            operationId: GetAllFeaturedSectionsWithArticles
            responses:
                "200":
                    description: List of featured sections with articles
                    schema:
                        $ref: '#/definitions/getFeaturedSectionsResponse'
            summary: Gets all featured sections with articles
            tags:
                - featured_sections
        post:
            description: Creates a featured section
            operationId: PostCreateFeaturedSection
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/createFeaturedSectionRequest'
            responses:
                "200":
                    description: CreateFeaturedSectionResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Creates a featured section
            tags:
                - featured_sections
    /api/v1/featured-sections/articles:
        get:
            description: Retrieves a featured sections with its associated articles
            operationId: GetFeaturedSectionsWithArticles
            responses:
                "200":
                    description: GetFeaturedSectionWithArticlesResponse
                    schema:
                        $ref: '#/definitions/getFeaturedSectionsWithArticlesResponse'
            summary: Gets a featured sections with articles
            tags:
                - featured_sections
    /api/v1/featured-sections/{id}:
        delete:
            description: Deletes a featured section by ID
            operationId: DeleteFeaturedSection
            parameters:
                - description: ID of the featured section
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: DeleteFeaturedSectionResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Deletes a featured section
            tags:
                - featured_sections
        get:
            description: Retrieves a featured section by ID
            operationId: GetFeaturedSection
            parameters:
                - description: ID of the featured section
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: GetFeaturedSectionResponse
                    schema:
                        $ref: '#/definitions/getFeaturedSectionResponse'
            summary: Gets a featured section
            tags:
                - featured_sections
        put:
            description: Updates a featured section by ID
            operationId: UpdateFeaturedSection
            parameters:
                - description: ID of the featured section
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/updateFeaturedSectionRequest'
            responses:
                "200":
                    description: UpdateFeaturedSectionResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Updates a featured section
            tags:
                - featured_sections
    /api/v1/featured-sections/{id}/articles:
        get:
            description: Retrieves a featured section with its associated articles
            operationId: GetFeaturedSectionWithArticles
            parameters:
                - description: ID of the featured section
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: GetFeaturedSectionWithArticlesResponse
                    schema:
                        $ref: '#/definitions/getFeaturedSectionWithArticlesResponse'
            summary: Gets a featured section with articles
            tags:
                - featured_sections
        put:
            description: Updates a featured articles by ID
            operationId: UpdateFeaturedArticles
            parameters:
                - description: ID of the featured section
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/updateFeaturedArticlesRequest'
            responses:
                "200":
                    description: UpdateFeaturedSectionResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Updates a featured articles
            tags:
                - featured_sections
    /api/v1/feedbacks:
        get:
            description: Return a list of Feedback
            operationId: GetFeedbackListRoute
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/feedbackList'
            security:
                - Bearer: []
            summary: Return a list of Feedback
            tags:
                - Feedback
        post:
            description: Update the given Feedback
            operationId: PostFeedbackRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/feedbackPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/messageResponse'
            security:
                - Bearer: []
            summary: Update the given Feedback
            tags:
                - Feedback
    /api/v1/feedbacks/{id}:
        delete:
            description: Delete Feedback with ID
            operationId: DeleteFeedbackRoute
            parameters:
                - description: ID of Feedback
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "204":
                    description: Success
            security:
                - Bearer: []
            summary: Delete Feedback with ID
            tags:
                - Feedback
        get:
            description: Return Feedback with ID
            operationId: GetFeedbackRoute
            parameters:
                - description: ID of Feedback
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/feedback'
            security:
                - Bearer: []
            summary: Return Feedback with ID
            tags:
                - Feedback
        put:
            description: Update the given Feedback
            operationId: PutFeedbackRoute
            parameters:
                - description: ID of Feedback
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/feedbackPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/messageResponse'
            security:
                - Bearer: []
            summary: Update the given Feedback
            tags:
                - Feedback
    /api/v1/healthy:
        get:
            description: |-
                This endpoint returns 200 when the service is healthy.
                Returns an human readable string about the current service status.
            operationId: GetHealthyRoute
            produces:
                - text/plain
            responses:
                "200":
                    description: Ready.
                "521":
                    description: Not ready.
            summary: Get healthy
            tags:
                - common
    /api/v1/push/notifications:
        post:
            description: Send push notifications to all users
            operationId: PostPushNotificationsRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/sendPushNotificationPayload'
            responses:
                "200":
                    description: OK
            security:
                - Bearer: []
            summary: Send push notifications to all users
            tags:
                - push
    /api/v1/push/test:
        get:
            deprecated: true
            description: Sends a test push message to the current user
            operationId: GetPushTestRoute
            responses:
                "200":
                    description: OK
            security:
                - Bearer: []
            summary: Send test push
            tags:
                - test
    /api/v1/push/token:
        put:
            description: |-
                Adds a push token for the given provider to the current user.
                If the oldToken is present it will be deleted.
                Currently only the provider 'fcm' is supported.
            operationId: PostUpdatePushTokenRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/postUpdatePushTokenPayload'
            responses:
                "200":
                    description: OK
                "404":
                    description: PublicHTTPError, type `OLD_PUSH_TOKEN_NOT_FOUND`
                    schema:
                        $ref: '#/definitions/publicHttpError'
                "409":
                    description: PublicHTTPError, type `PUSH_TOKEN_ALREADY_EXISTS`
                    schema:
                        $ref: '#/definitions/publicHttpError'
            security:
                - Bearer: []
            summary: Adds a push token to the user
            tags:
                - push
    /api/v1/streams:
        get:
            description: Return a list of Stream
            operationId: GetStreamListRoute
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/streamList'
            security:
                - Bearer: []
            summary: Return a list of Stream
            tags:
                - Stream
        post:
            description: Update the given Stream
            operationId: PostStreamRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/createStreamPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/stream'
            security:
                - Bearer: []
            summary: Update the given Stream
            tags:
                - Stream
    /api/v1/streams/events:
        post:
            description: ' Stream event'
            operationId: PostStreamEventRoute
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/streamEvent'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/streamEventResponse'
            summary: Stream event
            tags:
                - Stream
    /api/v1/streams/{id}:
        delete:
            description: Delete Stream with ID
            operationId: DeleteStreamRoute
            parameters:
                - description: ID of Stream
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "204":
                    description: Success
            security:
                - Bearer: []
            summary: Delete Stream with ID
            tags:
                - Stream
        get:
            description: Return Stream with ID
            operationId: GetStreamRoute
            parameters:
                - description: ID of Stream
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/stream'
            security:
                - Bearer: []
            summary: Return Stream with ID
            tags:
                - Stream
        put:
            description: Update the given Stream
            operationId: PutStreamRoute
            parameters:
                - description: ID of Stream
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/updateStreamPayload'
            responses:
                "200":
                    description: Success
                    schema:
                        $ref: '#/definitions/stream'
            security:
                - Bearer: []
            summary: Update the given Stream
            tags:
                - Stream
    /api/v1/streams/{id}/name:
        put:
            description: Update the given Stream name
            operationId: PutStreamNameRoute
            parameters:
                - description: ID of Stream
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/updateStreamNamePayload'
            responses:
                "200":
                    description: Success
            security:
                - Bearer: []
            summary: Update the given Stream name
            tags:
                - Stream
    /api/v1/tags:
        get:
            description: Retrieves all tags with their associated articles
            operationId: GetTags
            responses:
                "200":
                    description: List of tags
                    schema:
                        $ref: '#/definitions/getTagsResponse'
            summary: Gets all tags
            tags:
                - tags
        post:
            description: Creates a tag
            operationId: PostCreateTag
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/createTagRequest'
            responses:
                "200":
                    description: CreateTagResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Creates a tag
            tags:
                - tags
    /api/v1/tags/articles:
        get:
            description: Retrieves a tag with its associated articles
            operationId: GetTagWithArticlesMixin10
            responses:
                "200":
                    description: GetTagWithArticlesResponse
                    schema:
                        $ref: '#/definitions/getTagsWithArticlesResponse'
            summary: Gets a tag with articles
            tags:
                - tags
    /api/v1/tags/{id}:
        delete:
            description: Deletes a tag by ID
            operationId: DeleteTag
            parameters:
                - description: ID of the tag
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: DeleteTagResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Deletes a tag
            tags:
                - tags
        get:
            description: Retrieves a tag by ID
            operationId: GetTag
            parameters:
                - description: ID of the tag
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: GetTagResponse
                    schema:
                        $ref: '#/definitions/getTagResponse'
            summary: Gets a tag
            tags:
                - tags
        put:
            description: Updates a tag by ID
            operationId: UpdateTag
            parameters:
                - description: ID of the tag
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/updateTagRequest'
            responses:
                "200":
                    description: UpdateTagResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Updates a tag
            tags:
                - tags
    /api/v1/tags/{id}/articles:
        get:
            description: Retrieves a tag with its associated articles
            operationId: GetTagWithArticles
            parameters:
                - description: ID of the tag
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: GetTagWithArticlesResponse
                    schema:
                        $ref: '#/definitions/getTagWithArticlesResponse'
            summary: Gets a tag with articles
            tags:
                - tags
    /api/v1/tv-shows:
        get:
            description: Retrieves all TV shows
            operationId: GetAllTVShows
            responses:
                "200":
                    description: List of TV shows
                    schema:
                        $ref: '#/definitions/getTVShowsResponse'
            summary: Gets all TV shows
            tags:
                - tv-shows
        post:
            description: Creates a TV show
            operationId: PostCreateTVShow
            parameters:
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/createTVShowRequest'
            responses:
                "200":
                    description: CreateTVShowResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Creates a TV show
            tags:
                - tv-shows
    /api/v1/tv-shows/schedules:
        get:
            description: Retrieves all TV show with schedules
            operationId: GetAllTVShowsWithSchedules
            responses:
                "200":
                    description: List of TV show with schedules
                    schema:
                        $ref: '#/definitions/getAllTVShowsWithSchedulesResponse'
            summary: Gets all TV show with schedules
            tags:
                - tv_show_schedules
    /api/v1/tv-shows/{id}:
        delete:
            description: Deletes a TV show by ID
            operationId: DeleteTVShow
            parameters:
                - description: ID of the TV show
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: DeleteTVShowResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Deletes a TV show
            tags:
                - tv-shows
        get:
            description: Retrieves a TV show by ID
            operationId: GetTVShow
            parameters:
                - description: ID of the TV show
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: GetTVShowResponse
                    schema:
                        $ref: '#/definitions/getTVShowResponse'
            summary: Gets a TV show
            tags:
                - tv-shows
        put:
            description: Updates a TV show by ID
            operationId: UpdateTVShow
            parameters:
                - description: ID of the TV show
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/updateTVShowRequest'
            responses:
                "200":
                    description: UpdateTVShowResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Updates a TV show
            tags:
                - tv-shows
    /api/v1/tv-shows/{id}/schedules:
        get:
            description: Retrieves TV show with schedules
            operationId: GetTVShowSchedules
            parameters:
                - description: ID of the TV show
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
            responses:
                "200":
                    description: TV show with schedules
                    schema:
                        $ref: '#/definitions/getTVShowWithSchedulesResponse'
            summary: Gets TV show with schedules
            tags:
                - tv_show_schedules
        put:
            description: Updates a TV show schedule by ID
            operationId: UpdateTVShowSchedule
            parameters:
                - description: ID of the TV show schedule
                  format: uuid4
                  in: path
                  name: id
                  required: true
                  type: string
                - in: body
                  name: Payload
                  schema:
                    $ref: '#/definitions/updateTVShowScheduleRequest'
            responses:
                "200":
                    description: UpdateTVShowScheduleResponse
                    schema:
                        $ref: '#/definitions/messageResponse'
            summary: Updates a TV show schedule
            tags:
                - tv_show_schedules
    /api/v1/upload/image:
        post:
            consumes:
                - multipart/form-data
            description: Upload an image file. Supports JPEG, PNG, GIF, and WebP formats.
            operationId: postUploadImage
            parameters:
                - description: The image file to upload
                  in: formData
                  name: image
                  required: true
                  type: file
            produces:
                - application/json
            responses:
                "200":
                    description: Image uploaded successfully
                    schema:
                        $ref: '#/definitions/imageUploadResponse'
            summary: Upload an image
            tags:
                - common
    /api/v1/version:
        get:
            description: This endpoint returns the module name, commit and build-date baked into the app binary.
            operationId: GetVersionRoute
            produces:
                - text/plain
            responses:
                "200":
                    description: ModuleName @ Commit (BuildDate)
            summary: Get version
            tags:
                - common
    /swagger.yml:
        get:
            description: |-
                OpenAPI Specification ver. 2 (fka Swagger)
                Returns our handcrafted and validated `swagger.yml`.
            operationId: GetSwaggerRoute
            produces:
                - text/plain
            responses:
                "200":
                    description: OK
            summary: Get swagger.yml
            tags:
                - common
definitions:
    app:
        properties:
            config:
                type: string
            createdAt:
                type: string
            id:
                format: uuid4
                type: string
            name:
                type: string
            updatedAt:
                type: string
            userID:
                format: uuid4
                type: string
        required:
            - id
            - userID
            - name
            - config
        type: object
    appConfigPayload:
        properties:
            config:
                type: string
        required:
            - config
        type: object
    appList:
        items:
            $ref: '#/definitions/app'
        type: array
    appPayload:
        properties:
            config:
                type: string
            name:
                type: string
        required:
            - config
            - name
        type: object
    article:
        properties:
            app_id:
                description: ID of app
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            content:
                description: Content of the article
                example: This is the content of the article.
                type: string
            created_at:
                description: Timestamp when the article was created
                example: "2023-10-01T12:00:00Z"
                format: date-time
                type: string
            description:
                description: Description of the article
                example: This is the description of the article.
                type: string
            id:
                description: ID of article
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            image:
                description: Image of the article
                example: https://example.com/article-image.jpg
                type: string
            tags:
                description: Content of the article
                example: tag1,tag2,tag3
                type: string
            title:
                description: Title of the article
                example: Article Title
                maxLength: !!float 255
                type: string
            updated_at:
                description: Timestamp when the article was last updated
                example: "2023-10-02T12:00:00Z"
                format: date-time
                type: string
        required:
            - id
            - title
            - content
            - image
            - app_id
        type: object
    channel:
        properties:
            createdAt:
                type: string
            custom:
                type: boolean
            enabled:
                type: boolean
            id:
                format: uuid4
                type: string
            label:
                type: string
            platform:
                type: string
            secret:
                type: string
            server:
                type: string
            updatedAt:
                type: string
            userID:
                format: uuid4
                type: string
        required:
            - id
            - userID
            - platform
            - server
            - secret
            - enabled
            - custom
            - label
        type: object
    channelList:
        items:
            $ref: '#/definitions/channel'
        type: array
    channelPayload:
        properties:
            custom:
                type: boolean
            enabled:
                type: boolean
            label:
                type: string
            platform:
                type: string
            secret:
                type: string
            server:
                type: string
        required:
            - platform
            - server
            - secret
            - enabled
            - custom
            - label
        type: object
    createArticleRequest:
        properties:
            content:
                description: Content of the article
                example: This is the content of the article.
                type: string
            description:
                description: Description of the article
                example: This is the description of the article.
                type: string
            image:
                description: Image of the article
                example: https://example.com/article-image.jpg
                type: string
            tags:
                description: Content of the article
                example: tag1,tag2,tag3
                type: string
            title:
                description: Title of the article
                example: Article Title
                maxLength: !!float 255
                type: string
        required:
            - title
            - content
            - image
        type: object
    createFeaturedSectionRequest:
        properties:
            title:
                description: Title of the featured section
                type: string
        required:
            - title
        type: object
    createStreamPayload:
        properties:
            name:
                type: string
        required:
            - name
        type: object
    createTVShowRequest:
        properties:
            description:
                description: Description of the TV show
                example: This is the description of the TV show.
                type: string
            genre:
                description: Genre of the TV show
                example: Drama
                type: string
            image:
                description: Image of the TV show
                example: https://example.com/image.jpg
                type: string
            title:
                description: Title of the TV show
                example: TV Show Title
                maxLength: !!float 255
                type: string
        required:
            - title
        type: object
    createTagRequest:
        properties:
            title:
                description: Name of the tag
                example: Politics
                type: string
        required:
            - title
        type: object
    faq:
        properties:
            answer:
                type: string
            createdAt:
                type: string
            id:
                format: uuid4
                type: string
            question:
                type: string
            updatedAt:
                type: string
        required:
            - id
            - question
            - answer
        type: object
    faqList:
        items:
            $ref: '#/definitions/faq'
        type: array
    faqPayload:
        properties:
            answer:
                type: string
            question:
                type: string
        required:
            - question
            - answer
        type: object
    featuredSection:
        properties:
            app_id:
                description: ID of app
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            created_at:
                description: Timestamp when the section was created
                example: "2023-10-01T12:00:00Z"
                format: date-time
                type: string
            id:
                description: ID of section
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            title:
                description: Title of the featured section
                example: Top Stories
                type: string
            updated_at:
                description: Timestamp when the section was last updated
                example: "2023-10-02T12:00:00Z"
                format: date-time
                type: string
        required:
            - id
            - title
            - app_id
        type: object
    feedback:
        properties:
            createdAt:
                type: string
            id:
                format: uuid4
                type: string
            message:
                type: string
            subject:
                type: string
            type:
                type: string
            updatedAt:
                type: string
            userID:
                format: uuid4
                type: string
        required:
            - id
            - subject
            - type
            - message
        type: object
    feedbackList:
        items:
            $ref: '#/definitions/feedback'
        type: array
    feedbackPayload:
        properties:
            message:
                type: string
            subject:
                type: string
            type:
                type: string
            userID:
                format: uuid4
                type: string
        required:
            - subject
            - type
            - message
        type: object
    getAllTVShowsWithSchedulesResponse:
        items:
            $ref: '#/definitions/getTVShowWithSchedulesResponse'
        type: array
    getArticleResponse:
        properties:
            article:
                $ref: '#/definitions/article'
        type: object
    getArticlesResponse:
        items:
            $ref: '#/definitions/article'
        type: array
    getFeaturedSectionResponse:
        properties:
            section:
                $ref: '#/definitions/featuredSection'
        type: object
    getFeaturedSectionWithArticlesResponse:
        properties:
            articles:
                items:
                    properties:
                        app_id:
                            description: ID of app
                            example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                            format: uuid4
                            type: string
                        content:
                            description: Content of the article
                            example: This is the content of the article.
                            type: string
                        created_at:
                            description: Timestamp when the article was created
                            example: "2023-10-01T12:00:00Z"
                            format: date-time
                            type: string
                        description:
                            description: Description of the article
                            example: This is the description of the article.
                            type: string
                        id:
                            description: ID of article
                            example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                            format: uuid4
                            type: string
                        image:
                            description: Image of the article
                            example: https://example.com/article-image.jpg
                            type: string
                        tags:
                            description: Content of the article
                            example: tag1,tag2,tag3
                            type: string
                        title:
                            description: Title of the article
                            example: Article Title
                            maxLength: !!float 255
                            type: string
                        updated_at:
                            description: Timestamp when the article was last updated
                            example: "2023-10-02T12:00:00Z"
                            format: date-time
                            type: string
                    required:
                        - id
                        - title
                        - content
                        - image
                        - app_id
                    type: object
                type: array
            featured_section:
                $ref: '#/definitions/featuredSection'
        type: object
    getFeaturedSectionsResponse:
        items:
            $ref: '#/definitions/featuredSection'
        type: array
    getFeaturedSectionsWithArticlesResponse:
        items:
            $ref: '#/definitions/getFeaturedSectionWithArticlesResponse'
        type: array
    getTVShowResponse:
        properties:
            tv_show:
                $ref: '#/definitions/tVShow'
        type: object
    getTVShowWithSchedulesResponse:
        properties:
            schedules:
                items:
                    $ref: '#/definitions/tVShowSchedule'
                type: array
            tv_show:
                $ref: '#/definitions/tVShow'
        type: object
    getTVShowsResponse:
        items:
            $ref: '#/definitions/tVShow'
        type: array
    getTagResponse:
        properties:
            tag:
                $ref: '#/definitions/tag'
        type: object
    getTagWithArticlesResponse:
        properties:
            articles:
                items:
                    properties:
                        app_id:
                            description: ID of app
                            example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                            format: uuid4
                            type: string
                        content:
                            description: Content of the article
                            example: This is the content of the article.
                            type: string
                        created_at:
                            description: Timestamp when the article was created
                            example: "2023-10-01T12:00:00Z"
                            format: date-time
                            type: string
                        description:
                            description: Description of the article
                            example: This is the description of the article.
                            type: string
                        id:
                            description: ID of article
                            example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                            format: uuid4
                            type: string
                        image:
                            description: Image of the article
                            example: https://example.com/article-image.jpg
                            type: string
                        tags:
                            description: Content of the article
                            example: tag1,tag2,tag3
                            type: string
                        title:
                            description: Title of the article
                            example: Article Title
                            maxLength: !!float 255
                            type: string
                        updated_at:
                            description: Timestamp when the article was last updated
                            example: "2023-10-02T12:00:00Z"
                            format: date-time
                            type: string
                    required:
                        - id
                        - title
                        - content
                        - image
                        - app_id
                    type: object
                type: array
            tag:
                $ref: '#/definitions/tag'
        type: object
    getTagsResponse:
        items:
            $ref: '#/definitions/tag'
        type: array
    getTagsWithArticlesResponse:
        items:
            $ref: '#/definitions/getTagWithArticlesResponse'
        type: array
    getUserInfoResponse:
        properties:
            app_id:
                description: ID of app
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                type: string
            email:
                description: Email address of user, if available
                example: user@example.com
                format: email
                maxLength: !!float 255
                type: string
            id:
                description: ID of user
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                type: string
            name:
                description: name of user
                example: john doe
                type: string
        required:
            - id
            - name
            - email
        type: object
    httpValidationErrorDetail:
        properties:
            error:
                description: Error describing field validation failure
                type: string
            in:
                description: Indicates how the invalid field was provided
                type: string
            key:
                description: Key of field failing validation
                type: string
        required:
            - key
            - in
            - error
        type: object
    imageUploadResponse:
        properties:
            filename:
                description: The unique filename of the uploaded image
                example: 550e8400-e29b-41d4-a716-446655440000.jpg
                type: string
            url:
                description: The URL path where the uploaded image can be accessed
                example: /assets/images/550e8400-e29b-41d4-a716-446655440000.jpg
                type: string
        required:
            - url
            - filename
        type: object
    messageResponse:
        properties:
            message:
                example: created successfully.
                type: string
        type: object
    orderDir:
        enum:
            - asc
            - desc
        type: string
    postChangePasswordPayload:
        properties:
            currentPassword:
                description: Current password of user
                example: correct horse battery staple
                maxLength: !!float 500
                minLength: !!float 1
                type: string
            newPassword:
                description: New password to set for user
                example: correct horse battery staple
                maxLength: !!float 500
                minLength: !!float 1
                type: string
        required:
            - currentPassword
            - newPassword
        type: object
    postForgotPasswordCompletePayload:
        properties:
            password:
                description: New password to set for user
                example: correct horse battery staple
                maxLength: !!float 500
                minLength: !!float 1
                type: string
            token:
                description: Password reset token sent via email
                example: ec16f032-3c44-4148-bbcc-45557466fa74
                format: uuid4
                type: string
        required:
            - token
            - password
        type: object
    postForgotPasswordPayload:
        properties:
            email:
                description: Email address of user, if available
                example: user@example.com
                format: email
                maxLength: !!float 255
                type: string
        required:
            - email
        type: object
    postLoginPayload:
        properties:
            email:
                description: Email of user to authenticate as
                example: user@example.com
                format: email
                maxLength: !!float 255
                minLength: !!float 1
                type: string
            password:
                description: Password of user to authenticate as
                example: correct horse battery staple
                maxLength: !!float 255
                minLength: !!float 1
                type: string
        required:
            - email
            - password
        type: object
    postLoginResponse:
        properties:
            access_token:
                description: Access token required for accessing protected API endpoints
                example: eyJhdWQiOiJjdXN0b2...
                type: string
            refresh_token:
                description: Refresh token for refreshing the access token once it expires
                example: eyJhdWQiOiJjdXN0b2...
                type: string
        required:
            - access_token
            - refresh_token
        type: object
    postRefreshPayload:
        properties:
            refresh_token:
                description: Refresh token for refreshing the access token once it expires
                example: eyJhdWQiOiJjdXN0b2...
                type: string
        required:
            - refresh_token
        type: object
    postRegisterPayload:
        properties:
            email:
                description: Email to register with
                example: user@example.com
                format: email
                maxLength: !!float 255
                minLength: !!float 1
                type: string
            name:
                description: Name to register with
                example: John Doe
                maxLength: !!float 255
                minLength: !!float 1
                type: string
            password:
                description: Password to register with
                example: correct horse battery staple
                maxLength: !!float 255
                minLength: !!float 1
                type: string
        required:
            - name
            - email
            - password
        type: object
    postUpdatePushTokenPayload:
        properties:
            app_id:
                description: ID of app
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            fingerprint:
                description: uniquely identifies the build of the device.
                example: realme-RMX2001EEA-RMX2001L1:11-RP1A.200720.011-1647528410735:user-release-keys
                maxLength: !!float 500
                type: string
            newToken:
                description: New push token for given provider.
                example: 1c91e550-8167-439c-8021-dee7de2f7e96
                maxLength: !!float 500
                type: string
            oldToken:
                description: Old token that can be deleted if present.
                example: 495179de-b771-48f0-aab2-8d23701b0f02
                maxLength: !!float 500
                type: string
                x-nullable: true
            provider:
                description: Identifier of the provider the token is for (eg. "fcm", "apn"). Currently only "fcm" is supported.
                example: fcm
                maxLength: !!float 500
                type: string
        required:
            - newToken
            - provider
            - fingerprint
            - app_id
        type: object
    publicHttpError:
        properties:
            detail:
                description: More detailed, human-readable, optional explanation of the error
                example: User is lacking permission to access this resource
                type: string
            status:
                description: HTTP status code returned for the error
                example: !!float 403
                format: int64
                maximum: !!float 599
                minimum: !!float 100
                type: integer
                x-go-name: Code
            title:
                description: Short, human-readable description of the error
                example: Forbidden
                type: string
            type:
                description: Type of error returned, should be used for client-side error handling
                example: generic
                type: string
        required:
            - status
            - type
            - title
        type: object
    publicHttpValidationError:
        allOf:
            - $ref: '#/definitions/publicHttpError'
        properties:
            validationErrors:
                description: List of errors received while validating payload against schema
                items:
                    $ref: '#/definitions/httpValidationErrorDetail'
                type: array
        required:
            - validationErrors
        type: object
    putUserInfoPayload:
        properties:
            email:
                description: Email of user to authenticate as
                example: user@example.com
                format: email
                maxLength: !!float 255
                minLength: !!float 1
                type: string
            name:
                description: Name of user
                type: string
        required:
            - email
            - name
        type: object
    sendPushNotificationPayload:
        properties:
            body:
                description: Body of the notification
                example: This is the body of the notification.
                type: string
            image:
                description: Image of the notification
                example: https://example.com/picture.jpg
                type: string
            subject:
                description: Title of the notification
                example: Notification subject
                maxLength: !!float 255
                type: string
        required:
            - subject
            - body
        type: object
    stream:
        properties:
            app:
                type: string
            createdAt:
                type: string
            endpoint:
                type: string
            host:
                type: string
            id:
                format: uuid4
                type: string
            lastPublishedAt:
                type: string
            liveDescription:
                type: string
            liveTitle:
                type: string
            name:
                type: string
            password:
                type: string
            status:
                type: string
            thumbnail:
                type: string
            updatedAt:
                type: string
            url:
                type: string
            userID:
                format: uuid4
                type: string
            viewers:
                type: string
        required:
            - id
            - userID
            - name
            - url
            - thumbnail
            - status
            - viewers
        type: object
    streamEvent:
        properties:
            action:
                description: Action performed on the stream
                example: on_publish
                type: string
            app:
                description: Application name of the stream
                example: live
                type: string
            opaque:
                description: Optional opaque token
                example: mytoken
                type: string
            param:
                description: Parameters passed to the stream
                example: ?secret=8f7605d657c74d69b6b48f532c469bc9
                type: string
            request_id:
                description: Unique identifier for the request
                example: 3ab26a09-59b0-42f7-98e3-a281c7d0712b
                type: string
            stream:
                description: Stream name
                example: livestream
                type: string
            vhost:
                description: Virtual host of the stream
                example: __defaultVhost__
                type: string
        required:
            - request_id
            - action
            - vhost
            - app
            - stream
        type: object
    streamEventResponse:
        properties:
            code:
                description: Response code
                example: !!float 0
                type: integer
        required:
            - code
        type: object
    streamList:
        items:
            $ref: '#/definitions/stream'
        type: array
    tVShow:
        properties:
            app_id:
                description: ID of app
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            created_at:
                description: Timestamp when the TV show was created
                example: "2023-10-01T12:00:00Z"
                format: date-time
                type: string
            description:
                description: Description of the TV show
                example: This is the description of the TV show.
                type: string
            genre:
                description: Genre of the TV show
                example: Drama
                type: string
            id:
                description: ID of the TV show
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            image:
                description: Image of the TV show
                example: https://example.com/image.jpg
                type: string
            title:
                description: Title of the TV show
                example: TV Show Title
                maxLength: !!float 255
                type: string
            updated_at:
                description: Timestamp when the TV show was last updated
                example: "2023-10-02T12:00:00Z"
                format: date-time
                type: string
        required:
            - id
            - title
            - image
            - app_id
        type: object
    tVShowSchedule:
        properties:
            day:
                description: Day of the week for the schedule
                example: Monday
                type: string
            id:
                description: ID of the schedule
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            is_active:
                description: Indicates if the show is active on this day
                example: true
                type: boolean
            time:
                description: Time of the schedule
                example: "2023-10-01T14:00:00Z"
                format: time
                type: string
            tv_show_id:
                description: ID of the associated TV show
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
        required:
            - id
            - tv_show_id
            - day
            - is_active
            - time
        type: object
    tag:
        properties:
            app_id:
                description: ID of app
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            created_at:
                description: Timestamp when the tag was created
                example: "2023-10-01T12:00:00Z"
                format: date-time
                type: string
            id:
                description: ID of tag
                example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
                format: uuid4
                type: string
            title:
                description: Name of the tag
                example: Politics
                type: string
            updated_at:
                description: Timestamp when the tag was last updated
                example: "2023-10-02T12:00:00Z"
                format: date-time
                type: string
        required:
            - id
            - title
            - app_id
        type: object
    updateArticleRequest:
        properties:
            content:
                description: Content of the article
                example: This is the content of the article.
                type: string
            description:
                description: Description of the article
                example: This is the description of the article.
                type: string
            image:
                description: Image of the article
                example: https://example.com/article-image.jpg
                type: string
            tags:
                description: Content of the article
                example: tag1,tag2,tag3
                type: string
            title:
                description: Title of the article
                example: Article Title
                maxLength: !!float 255
                type: string
        required:
            - title
            - content
            - image
        type: object
    updateFeaturedArticlesRequest:
        items:
            description: ID of article
            example: 82ebdfad-c586-4407-a873-4cc1c33d56fc
            format: uuid4
            type: string
        type: array
    updateFeaturedSectionRequest:
        properties:
            title:
                description: Title of the featured section
                type: string
        required:
            - title
        type: object
    updateStreamNamePayload:
        properties:
            name:
                type: string
        required:
            - name
        type: object
    updateStreamPayload:
        properties:
            liveDescription:
                type: string
            liveTitle:
                type: string
            thumbnail:
                type: string
        type: object
    updateTVShowRequest:
        properties:
            description:
                description: Description of the TV show
                example: This is the description of the TV show.
                type: string
            genre:
                description: Genre of the TV show
                example: Drama
                type: string
            image:
                description: Image of the TV show
                example: https://example.com/image.jpg
                type: string
            title:
                description: Title of the TV show
                example: TV Show Title
                maxLength: !!float 255
                type: string
        required:
            - title
        type: object
    updateTVShowScheduleRequest:
        items:
            properties:
                day:
                    description: Day of the week for the schedule
                    example: Monday
                    type: string
                is_active:
                    description: Indicates if the show is active on this day
                    example: true
                    type: boolean
                time:
                    description: Time of the schedule
                    example: 14:00:00
                    format: time
                    type: string
            required:
                - time
                - is_active
                - day
            type: object
        type: array
    updateTagRequest:
        properties:
            title:
                description: Name of the tag
                example: Politics
                type: string
        required:
            - title
        type: object
parameters:
    AppIdParam:
        description: ID of App
        format: uuid4
        in: path
        name: id
        required: true
        type: string
    ChannelIdParam:
        description: ID of Channel
        format: uuid4
        in: path
        name: id
        required: true
        type: string
    FaqIdParam:
        description: ID of Faq
        format: uuid4
        in: path
        name: id
        required: true
        type: string
    FeedbackIdParam:
        description: ID of Feedback
        format: uuid4
        in: path
        name: id
        required: true
        type: string
    StreamIdParam:
        description: ID of Stream
        format: uuid4
        in: path
        name: id
        required: true
        type: string
responses:
    AuthForbiddenResponse:
        description: PublicHTTPError, type `USER_DEACTIVATED`/`NOT_LOCAL_USER`
        schema:
            $ref: '#/definitions/publicHttpError'
    AuthUnauthorizedResponse:
        description: PublicHTTPError
        schema:
            $ref: '#/definitions/publicHttpError'
    InvalidPasswordResponse:
        description: PublicHTTPValidationError, type `INVALID_PASSWORD`
        schema:
            $ref: '#/definitions/publicHttpValidationError'
    ValidationError:
        description: PublicHTTPValidationError
        schema:
            $ref: '#/definitions/publicHttpValidationError'
securityDefinitions:
    Bearer:
        description: |-
            Access token for application access, **must** include "Bearer " prefix.
            Example: `Bearer b4a94a42-3ea2-4af3-9699-8bcbfee6e6d2`
        in: header
        name: Authorization
        type: apiKey
        x-keyPrefix: 'Bearer '
